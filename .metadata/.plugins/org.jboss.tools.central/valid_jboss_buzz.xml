<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>The joys and perils of aliasing in C and C++, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JbEoSdUb1R4/" /><category term="C" scheme="searchisko:content:tags" /><category term="c pointer" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="lvalue" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="unsigned char" scheme="searchisko:content:tags" /><author><name>Martin Sebor</name></author><id>searchisko:content:id:jbossorg_blog-the_joys_and_perils_of_aliasing_in_c_and_c_part_2</id><updated>2020-06-03T07:00:06Z</updated><published>2020-06-03T07:00:06Z</published><content type="html">&lt;p&gt;In the previous article, I discussed the benefits of C and C++ language restrictions in optimized code. In this second half, I present a variety of programming language exemptions and compiler extensions that developers can use to get around aliasing restrictions more or less safely. I will also discuss the common pitfalls of aliasing, both resulting from the extensions as well as from misuses of standard language constructs, and illustrate common problems these pitfalls might cause.&lt;/p&gt; &lt;p&gt;&lt;span id="more-722377"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2 id="exemptions-from-aliasing"&gt;Exceptions to the rules&lt;/h2&gt; &lt;p&gt;The restrictions imposed by the aliasing rules I introduced in Part 1 might seem relatively lenient, but many use cases would be impossible without exceptions to them, especially in system-level code. The C and C++ languages only codify two of these exemptions; the remaining ones are implementation-defined extensions found in popular compilers. Because the expressiveness and power of the implementation-defined extensions tend to be prioritized over safety and the ability to detect mistakes, their use is often fraught with peril—at least as much as, if not more than, using the standard mechanisms. In this section, I will introduce both programming language exemptions and compiler extensions. I will explain how these exceptions to the rules of aliasing are commonly misused and the consequences of abusing them.&lt;/p&gt; &lt;h3 id="aliasing-by-character-types"&gt;Aliasing by character types&lt;/h3&gt; &lt;p&gt;Both C and C++ provide an exemption to the type-aliasing requirement introduced in Part 1. This exemption allows you to copy objects by calls to functions like &lt;code&gt;memcpy&lt;/code&gt; and &lt;code&gt;memmove&lt;/code&gt;, or their user-defined equivalents. This exemption says that, in addition to its own type, an object of any type may have its value accessed by an lvalue of &lt;code&gt;unsigned char&lt;/code&gt; or any other narrow character type, although the exemption is best limited to &lt;code&gt;unsigned char&lt;/code&gt;. (In recent C++ the special library type &lt;code&gt;std::byte&lt;/code&gt; can also be used.)&lt;/p&gt; &lt;p&gt;We can use an lvalue of &lt;code&gt;unsigned char&lt;/code&gt; to prevent the optimization you saw in Part 1: &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/Cmg5a3"&gt;Accesses via pointers to incompatible types&lt;/a&gt;&lt;/em&gt;. Consider the modified version here (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/u4i__j"&gt;Access by character type&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int f (int *a, long *b) { int t = *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;; for (int i = 0; i != sizeof *b; ++i) ((unsigned char*)&lt;span style="color: #339966;"&gt;b&lt;/span&gt;)[i] = 0; return *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt; - t; // must not be folded }&lt;/pre&gt; &lt;p&gt;In this case, the compiler cannot fold the &lt;code&gt;return&lt;/code&gt; expression because the function would be valid if called with &lt;code&gt;b&lt;/code&gt; equal to &lt;code&gt;a&lt;/code&gt;. However, using &lt;code&gt;restrict&lt;/code&gt;when declaring the &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; pointers would make calling &lt;code&gt;f&lt;/code&gt; with overlapping objects invalid. Doing that would re-enable the optimization opportunity.&lt;/p&gt; &lt;p&gt;This exemption keeps compilers from making assumptions about functions accessing objects via pointers to incompatible types. It does so even in a context where it&amp;#8217;s safe to assume pointers point to distinct objects, such as when pointers point to distinct types. For example, consider that we might also use the &lt;code&gt;for&lt;/code&gt; loop in this example in another function. A compiler would have to avoid folding the &lt;code&gt;return&lt;/code&gt; expression if &lt;code&gt;f&lt;/code&gt; were to call this other function, even if &lt;code&gt;*b&lt;/code&gt; were also read in &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The permission for &lt;code&gt;unsigned char&lt;/code&gt; to access objects of other types doesn&amp;#8217;t lift the constraint imposed by the &lt;code&gt;restrict&lt;/code&gt; keyword, however. Using the &lt;code&gt;restrict&lt;/code&gt; keyword with the pointer &lt;code&gt;a&lt;/code&gt; implies that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; either do not overlap or that if they do, &lt;code&gt;g(b)&lt;/code&gt; doesn&amp;#8217;t modify &lt;code&gt;*a&lt;/code&gt; via &lt;code&gt;*b&lt;/code&gt; or any other means.&lt;/p&gt; &lt;p&gt;The next example shows how at least one compiler leverages this restriction to fold the subtraction in the &lt;code&gt;return&lt;/code&gt; expression (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/mmo8uJ"&gt;Transitivity of restrict qualifier&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; void g (void *); int f (int * restrict a, void * b) { int t = *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;; g (b); // can be assumed not to modify *a return *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt; - t; // can be folded to zero }&lt;/pre&gt; &lt;p&gt;This optimization is possible regardless of what type &lt;code&gt;b&lt;/code&gt; points to, or whether &lt;code&gt;b&lt;/code&gt; is declared with the &lt;code&gt;restrict&lt;/code&gt; keyword. Note, however, that for clarity, it&amp;#8217;s best to declare &lt;code&gt;restrict&lt;/code&gt; for all pointer arguments that you intend to be subject to this restriction.&lt;/p&gt; &lt;h3 id="common-initial-sequence"&gt;Common initial sequence&lt;/h3&gt; &lt;p&gt;As I mentioned earlier, the requirement to access every object by an lvalue of its type also rules out accessing a member of one &lt;code&gt;struct&lt;/code&gt; using a pointer to another &lt;code&gt;struct&lt;/code&gt;, even if both members have the same type. However, it turns out that this form of aliasing can be useful between members of the same union. To enable this use case, C and C++ offer the special exemption that when two &lt;code&gt;struct&lt;/code&gt;s are members of the same union, accessing their common initial sequence is valid. Programmers can use this special exception to modify the initial members of otherwise incompatible &lt;code&gt;struct&lt;/code&gt; types, as shown here (see&lt;i&gt; &lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/qo3izJ"&gt;Common initial sequence&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int num, a[2]; }; struct B { int cnt, a[4]; }; union U { struct A a; struct B b; }; int f (struct A *a, struct B *b) { int t = &lt;span style="color: #ff0000;"&gt;a-&amp;#62;num&lt;/span&gt;; ((union U*)b)-&amp;#62;&lt;span style="color: #339966;"&gt;b.cnt&lt;/span&gt; = 0; // may change a-&amp;#62;num return &lt;span style="color: #ff0000;"&gt;a-&amp;#62;num&lt;/span&gt; - t; // cannot be folded }&lt;/pre&gt; &lt;p&gt;In this case, it&amp;#8217;s valid to call &lt;code&gt;f&lt;/code&gt; with both arguments pointing to the same object. Conversely, what if a compiler was compiling a call to a function that took pointers to distinct &lt;code&gt;struct&lt;/code&gt;s as arguments? In that case, the compiler would have to assume that the call could modify the initial sequence of the &lt;code&gt;struct&lt;/code&gt; members.&lt;/p&gt; &lt;h4&gt;Implementation notes&lt;/h4&gt; &lt;p&gt;One thing to note is that the common initial sequence consists of members that have compatible types. For arrays, the compatible type includes their size. The sequence ends with the first occurrence of a pair of members whose types are not strictly compatible. The sequence in the example consists of just the two members &lt;code&gt;a-&amp;#62;num&lt;/code&gt; and &lt;code&gt;b-&amp;#62;cnt&lt;/code&gt;. It doesn&amp;#8217;t extend to the first two elements of the &lt;code&gt;a-&amp;#62;a&lt;/code&gt; and &lt;code&gt;b-&amp;#62;a&lt;/code&gt; arrays, however, although they have the same type. The reason is that the types of the arrays are not compatible—&lt;code&gt;int[2]&lt;/code&gt; is not compatible with &lt;code&gt;int[4]&lt;/code&gt;, or even with &lt;code&gt;int[]&lt;/code&gt;, for that matter.&lt;/p&gt; &lt;p&gt;Another thing to note is that the common initial sequence rule isn&amp;#8217;t consistently interpreted by all implementers. As a result, different compilers might disagree about how to handle access to initial members of a union. In the most conservative interpretation, the mere definition of a union type implies that any accesses to &lt;code&gt;struct&lt;/code&gt; objects that share a common initial sequence should be assumed to alias unless proven otherwise. On the other side, the most restrictive interpretation says that the access must involve a cast to the union type. The latter implementation, which is shown in the example, is the safest approach for portable code. The GNU Compiler Collection (GCC) uses this interpretation.&lt;/p&gt; &lt;h3 id="type-punning-via-unions"&gt;Type punning via a union&lt;/h3&gt; &lt;p&gt;The &lt;i&gt;common initial sequence&lt;/i&gt; exemption says that when two &lt;code&gt;struct&lt;/code&gt;s are members of the same union, accessing their common initial sequence is valid. As an extension of this rule, it is also acceptable to access an object of one type via an lvalue of another type, if both types are members of the same union. This kind of access—reading an object by an lvalue of a type other than that of its stored value—is called &lt;i&gt;type punning&lt;/i&gt;. It&amp;#8217;s permitted in standard C but disallowed in C++.&lt;/p&gt; &lt;p&gt;GCC supports type punning in both languages with a restrictive interpretation similar to what it offers for the common initial sequence. In this case, the access expression must involve the union type. See the &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Optimize-Options.html#Type-punning"&gt;comments about type punning in the GCC manual&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="attribute-may_alias"&gt;Attribute &lt;code&gt;may_alias&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;By extending the exemption for &lt;code&gt;unsigned char&lt;/code&gt;, it is possible to use GCC&amp;#8217;s &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Common-Type-Attributes.html#Common-Type-Attributes#index-may_005falias-type-attribute"&gt;may_alias&lt;/a&gt;&lt;/code&gt; type attribute to define a type that is exempt from type-based aliasing restrictions. Like &lt;code&gt;unsigned char&lt;/code&gt;, we can use lvalues of a type declared with this attribute to access objects of any type (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/y5-GZr"&gt;Access via a &lt;code&gt;may_alias&lt;/code&gt; type&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int f (int *a, long *b) { int t = *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;; typedef __attribute__ ((may_alias)) long AliasLong; *(AliasLong*)&lt;span style="color: #339966;"&gt;b&lt;/span&gt; = 0; return *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt; - t; }&lt;/pre&gt; &lt;p&gt;Used this way, &lt;code&gt;may_alias&lt;/code&gt; prevents the optimization found in the example of &lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/Cmg5a3"&gt;Accesses via pointers to incompatible types&lt;/a&gt;. The compiler can&amp;#8217;t fold the &lt;code&gt;return&lt;/code&gt; expression in this example because it&amp;#8217;s now valid for &lt;code&gt;b&lt;/code&gt; to point to the same object as &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="aliases-and-weak-symbols"&gt;Aliases and weak symbols&lt;/h2&gt; &lt;p&gt;To support low-level programs and libraries, GCC and compatible compilers provide several extensions that make it possible to define aliases for functions, as well as variables. Like &lt;code&gt;may_alias&lt;/code&gt;, you will see that these extensions typically take the form of attributes, or sometimes of pragmas.&lt;/p&gt; &lt;h3 id="attribute-alias"&gt;Attribute &lt;code&gt;alias&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;When applied to a declaration of a function or variable, the attribute &lt;code&gt;alias&lt;/code&gt; tells the compiler that the declared symbol provides an &lt;em&gt;alias&lt;/em&gt;, or alternate identity, for the symbol being named. The named symbol is known as the alias &lt;i&gt;target&lt;/i&gt;. The target must be defined in the same translation unit as the alias; the alias itself can only be declared, it cannot be defined. Typically, especially in libraries, the alias is declared as an ordinary symbol, without the attribute. This declaration is placed in a header, which a program can include. The target usually is not declared in a public header.&lt;/p&gt; &lt;p&gt;Aliases are most commonly used to provide an alternative name for a function, but they also work for variables. For instance, because in the example below &lt;code&gt;b&lt;/code&gt; is declared as an alias—or as another name for the array &lt;code&gt;a&lt;/code&gt;—the compiler can no longer fold the &lt;code&gt;return&lt;/code&gt; expression to zero (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/aB4Akp"&gt;Attribute alias on a variable&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int a[8]; extern __attribute__ ((alias ("a"))) int b[8]; int f (int i, int j) { int t = &lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;[i]; &lt;span style="color: #339966;"&gt;b&lt;/span&gt;[j] = 0; // modifies a return &lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;[i] - t; // cannot be folded }&lt;/pre&gt; &lt;p&gt;The alias declaration is a definition even when also declared &lt;code&gt;extern&lt;/code&gt;. The alias target must be defined in the same translation unit as the alias declaration. Consequently, in the general case, there is no way to declare an alias in a header to let the compiler know that the two refer to the same symbol. This fact violates one of the basic principles of the C and C++ object models, that distinct declarations must designate distinct entities.&lt;/p&gt; &lt;p&gt;If a compiler relies on this principle (as they all inevitably do), using the &lt;code&gt;alias&lt;/code&gt; attribute can lead to surprising results. As an example, say that both the alias and the target are declared in a header and used in a program. The compiler might fold the subtraction in the &lt;code&gt;return&lt;/code&gt; statement to zero in a function. This would be just like &lt;code&gt;f&lt;/code&gt; in the example above, but in a different source file.&lt;/p&gt; &lt;p&gt;Aliases are useful and important, but without extreme care, using them can lead to subtle bugs.&lt;/p&gt; &lt;h3 id="attribute-weak"&gt;Attribute &lt;code&gt;weak&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Common-Function-Attributes.html#index-weak-function-attribute"&gt;weak&lt;/a&gt;&lt;/code&gt; attribute is similar to the &lt;code&gt;alias&lt;/code&gt; attribute: It declares that the function or variable it is attached to denotes a &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Weak_symbol"&gt;weak symbol&lt;/a&gt;&lt;/em&gt;, which may (but need not be) defined elsewhere in the program. If the symbol is not defined, its address is equal to null. Like &lt;code&gt;alias&lt;/code&gt;, the &lt;code&gt;weak&lt;/code&gt; attribute is also intended primarily to provide a mechanism to declare &amp;#8220;special&amp;#8221; library functions.&lt;/p&gt; &lt;p&gt;The typical example is the &lt;code&gt;malloc&lt;/code&gt; family of functions, which Unix-based implementations of the C library allow programs to replace with alternatives of their own. In this case, the &amp;#8220;strong&amp;#8221; definition would be used in place of the weak one. Specifying the &lt;code&gt;weak&lt;/code&gt; attribute on a variable declaration has the same meaning as it would on a function. Unlike &lt;code&gt;alias&lt;/code&gt;, however, weak symbols need not be defined. In those instances, the address of such an undefined weak symbol (either function or variable) is null, and so using such a symbol must be preceded by a test for its address being non-null.&lt;/p&gt; &lt;p&gt;This rule is in conflict with the C and C++ standards, which require that the address of every function and object in a program must be non-null. However, as long as the tested declaration is known to be a weak symbol (meaning, it has the attribute &lt;code&gt;weak&lt;/code&gt;), compilers will not use the standard requirement to remove such a test.&lt;/p&gt; &lt;p&gt;You can see an example in the following function, where &lt;code&gt;a&lt;/code&gt; is not declared as a weak symbol, and so is considered to declare an ordinary or strong symbol. The tests for &lt;code&gt;a&lt;/code&gt; are removed, but the test for &lt;code&gt;b&lt;/code&gt; is retained (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/UFqHFJ"&gt;Testing address of symbols for equality to null&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; extern int a[8]; extern __attribute__ ((weak)) int b[8]; int f (int i, int j) { int t = a ? &lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;[i] : 0; // replaced by 'int t = a[i];' if (&lt;span style="color: #339966;"&gt;b&lt;/span&gt;) // test emitted &lt;span style="color: #339966;"&gt;b&lt;/span&gt;[j] = 0; // may modify a return a ? &lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;[i] - t : 0; // folded to zero }&lt;/pre&gt; &lt;h4&gt;Weak declarations&lt;/h4&gt; &lt;p&gt;Any symbol can be declared &lt;code&gt;weak&lt;/code&gt;. If we were to declare &lt;code&gt;a&lt;/code&gt; to be &lt;code&gt;weak&lt;/code&gt; in a different file, eliminating the tests again would lead to surprising results. Consequently, if one declaration declares a symbol weak, they all should. Compilers tend to translate programs one source file at a time, so issuing warnings for code that does otherwise is rarely feasible.&lt;/p&gt; &lt;p&gt;Additionally, because an external symbol can also be declared to be an alias, if &lt;code&gt;b&lt;/code&gt; were declared an alias for &lt;code&gt;a&lt;/code&gt; in another source file, the results would be surprising, and likely incorrect. To illustrate the risks, imagine that we compiled the above file and linked it to a complete program with a file containing the following declarations:&lt;/p&gt; &lt;pre&gt; #include &amp;#60;stdio.h&amp;#62; int b[8] = { 0, 1 }; extern __attribute__ ((alias ("b"))) int a[8]; int f (int, int); int main (void) { int n = f (1, 1); printf ("%i %i\n", b[1], n); }&lt;/pre&gt; &lt;p&gt;Although the complete program compiles and links with no warnings, when we run it, it behaves as if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; were distinct objects, even though they are one and the same.&lt;/p&gt; &lt;h2 id="zero-length-arrays"&gt;Zero-length arrays&lt;/h2&gt; &lt;p&gt;In contrast to the extensions discussed so far, GCC&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Zero-Length.html"&gt;zero-length array&lt;/a&gt; feature isn&amp;#8217;t meant to provide an escape hatch from aliasing rules. Rather, it&amp;#8217;s an ancient mechanism designed to get around the absence of flexible-array members, which were first introduced in C99. The goal of both a zero-length array and a flexible-array member is to declare a structure with a size that is determined at runtime. It allows the last member of such a structure to be an array with an unspecified number of zero or more elements. However, unlike a flexible-array member, which must always be the last member of a structure object, zero-length arrays are accepted in any context—even serving as interior structure members that are followed by other members.&lt;/p&gt; &lt;p&gt;With the exception of padding, an access to an element of an interior zero-length array is actually an access to a subsequent member. This is not an intended feature, but rather a consequence of overly permissive design. Compilers can (and GCC does) assume that such overlapping accesses do not take place. As a result, GCC 10 uses the new &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wzero-length-bounds"&gt;-Wzero-length-bounds&lt;/a&gt;&lt;/code&gt; warning to diagnose accesses to interior zero-length arrays.&lt;/p&gt; &lt;p&gt;The next example illustrates both the invalid assumption that array accesses may alias other members of the same object, as well the warning that detects it (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/xWDRH7"&gt;Aliasing by zero-length array&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int n, &lt;span style="color: #339966;"&gt;a[0]&lt;/span&gt;; }; struct B { struct A a; int x; }; int f (struct B *p, int i) { int t = p-&amp;#62;&lt;span style="color: #ff0000;"&gt;x&lt;/span&gt;; p-&amp;#62;a.&lt;span style="color: #339966;"&gt;a&lt;/span&gt;[i] = 0; // -Wzero-length-bounds return p-&amp;#62;&lt;span style="color: #ff0000;"&gt;x&lt;/span&gt; - t; // can be folded to zero }&lt;/pre&gt; &lt;h2 id="opting-out-of-aliasing-rules"&gt;Opting out of aliasing rules&lt;/h2&gt; &lt;p&gt;As the examples so far show, C and C++ outline exact requirements about the identity of symbols and objects in programs. Programs that abide by these requirements benefit by reducing the number of memory accesses required to reload unchanged values. But what about programs that were not written with these requirements in mind? Legacy software and poorly written code both omit aliasing requirements, albeit for different reasons. Is there some way for these programs to opt-out of aliasing rules?&lt;/p&gt; &lt;p&gt;Although you might think the answer would be yes, it turns out that, for the most part, the answer is no. GCC and compatible compilers do provide the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Optimize-Options.html#index-fstrict-aliasing"&gt;-fno-strict-aliasing&lt;/a&gt;&lt;/code&gt; option, but it only applies to a subset of the rules; namely, type-based aliasing. The &lt;code&gt;-fno-strict-aliasing&lt;/code&gt; option doesn&amp;#8217;t prevent GCC from making other assumptions I&amp;#8217;ve discussed, including those about the identity of objects and the absence of other forms of aliasing (such as with zero-length arrays).&lt;/p&gt; &lt;h2 id="the-price-of-aliasing-exemptions"&gt;The price of aliasing exemptions&lt;/h2&gt; &lt;p&gt;As with most exceptions to the rules, permission for other types to access objects of any type comes at a price. A particular use of the C++ &lt;code&gt;std::string&lt;/code&gt; container nicely illustrates this problem. Given that &lt;code&gt;std::string&lt;/code&gt; is little more than a wrapper for a character pointer—specifically, &lt;code&gt;const char*&lt;/code&gt;—the compiler assumes that any modification to a &lt;code&gt;std::string&lt;/code&gt; object could potentially modify any object that may be reachable by that pointer in the program. The only exception would be if a compiler could track the value of the wrapped pointer (or, using a more technical phrase, &lt;i&gt;track its provenance&lt;/i&gt;) and prove otherwise. This rule holds even though the class guarantees that the wrapped pointer never points to anything but an internal buffer, which is managed by the object.&lt;/p&gt; &lt;p&gt;You can see this pitfall illustrated in the next example, where we would like the compiler to fold the &lt;code&gt;return&lt;/code&gt; expression to zero. Because of the exemption, no compiler is able to do it (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/bGqEzd"&gt;Access by std::string aliases anything&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; #include &amp;#60;string&amp;#62; int x; int f (std::string &amp;#38;str) { int t = &lt;span style="color: #ff0000;"&gt;x&lt;/span&gt;; &lt;span style="color: #339966;"&gt;str&lt;/span&gt; = ""; // assumed to alias x return t - &lt;span style="color: #ff0000;"&gt;x&lt;/span&gt;; // not folded to zero }&lt;/pre&gt; &lt;p&gt;The price, in this case, is an efficiency penalty, and the problem isn&amp;#8217;t limited to &lt;code&gt;std::string&lt;/code&gt;. It affects any C or C++ container type that embeds an internal pointer that it uses to access data. With pointers to other types such as &lt;code&gt;int*&lt;/code&gt;, the scope of the problem is limited to objects of just the compatible types. So, in this example, we must assume that &lt;code&gt;std::vector&amp;#60;int&amp;#62;&lt;/code&gt; modifies any reachable variable of type &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Besides the loss of efficiency, exemptions from otherwise tight rules have another consequence: They limit the ability to detect and diagnose coding bugs. For instance, by accepting declarations of zero-length arrays even when they are followed by another member, compilers introduce the possibility of bugs into any code that accesses such members (also see &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/5iHLRf"&gt;Access by zero-length array&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int x, &lt;span style="color: #339966;"&gt;a[0]&lt;/span&gt;, y; }; int f (struct A *a) { int t = a-&amp;#62;&lt;span style="color: #ff0000;"&gt;y&lt;/span&gt;; a-&amp;#62;&lt;span style="color: #339966;"&gt;a&lt;/span&gt;[1] = 123; // overlaps with b-&amp;#62;y return t - a-&amp;#62;&lt;span style="color: #ff0000;"&gt;y&lt;/span&gt;; // folded to zero }&lt;/pre&gt; &lt;p&gt;With the exception of Visual C++, which doesn&amp;#8217;t support the extension, all tested compilers fold the &lt;code&gt;return&lt;/code&gt; expression in this example to zero. Yet, when called with the address of an object whose member &lt;code&gt;y&lt;/code&gt; is set to any value but &lt;code&gt;123&lt;/code&gt;, the function returns an unexpected result: also zero. GCC 10 is the only compiler that detects this likely bug; it does so by issuing the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wzero-length-bounds"&gt;-Wzero-length-bounds&lt;/a&gt;&lt;/code&gt; warning. Unfortunately, GCC 10 is impotent against instances of the same bug when the zero-length array is the last member of a &lt;code&gt;struct&lt;/code&gt; sub-object, which is then followed by another member in some other &lt;code&gt;struct&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This is not a problem with standard flexible-array members. The C language requires those to be defined last in the outermost enclosing struct. That also means that a struct with a flexible array member cannot be used to declare a member of another struct. Regrettably, GCC accepts such invalid uses as another extension, with the possibility of causing the same bug (see &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/V_Z849"&gt;Aliasing access by flexible array member&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int x, &lt;span style="color: #339966;"&gt;a[]&lt;/span&gt;; }; struct B { struct A a; int y; }; int f (struct A *a, struct B *b) { int t = b-&amp;#62;&lt;span style="color: #ff0000;"&gt;y&lt;/span&gt;; a-&amp;#62;&lt;span style="color: #339966;"&gt;a&lt;/span&gt;[1] = 123; // overlaps with b-&amp;#62;y return t - b-&amp;#62;&lt;span style="color: #ff0000;"&gt;y&lt;/span&gt;; // folded to zero }&lt;/pre&gt; &lt;h3 id="detecting-aliasing-bugs"&gt;Warnings to detect aliasing bugs&lt;/h3&gt; &lt;p&gt;None of the popular compilers tested for this article detects any of the aliasing bugs we&amp;#8217;ve discussed. However, GCC and compatible compilers expose two warning options, which are designed to detect disjoint subsets of these bugs: &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wstrict-aliasing"&gt;-Wstrict-aliasing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wrestrict"&gt;-Wrestrict&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;-Wstrict-aliasing&lt;/code&gt; is a multi-level option designed to detect basic violations of type-based aliasing rules. &lt;code&gt;-Wrestrict&lt;/code&gt;, on the other hand, detects overlapping accesses by &lt;code&gt;restrict&lt;/code&gt;-qualified pointers in a subset of string-manipulation functions known to GCC, as well as passing the same pointers to &lt;code&gt;restrict&lt;/code&gt;-qualified arguments in user-defined functions.&lt;/p&gt; &lt;p&gt;Additionally, GCC 10 includes the new &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wzero-length-bounds"&gt;-Wzero-length-bounds&lt;/a&gt;&lt;/code&gt; warnings, which are used to detect accesses to zero-length arrays.&lt;/p&gt; &lt;p&gt;All three warnings are included in GCC&amp;#8217;s &lt;code&gt;-Wall&lt;/code&gt;. While current implementations still leave much room for improvement, they are a sign that compiler implementers are moving in the right direction and attempting to detect these bugs that are otherwise hard to catch.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this two-part series, you have learned that carefully following aliasing rules in C and C++ can benefit runtime efficiency. At the same time, it&amp;#8217;s quite easy to bypass the rules, either by necessity or by mistake. As many of the examples highlight, these exceptions often come with considerable risks. Using them incorrectly or carelessly can lead to bugs that are hard to find.&lt;/p&gt; &lt;p&gt;Using exemptions means that the compiler can only rely on the rules if it can prove that no exemption was exercised. Otherwise, the compiler must conservatively assume that the rules have been bypassed. Given that compilers have limited visibility into programs, such conservative assumptions typically result in suboptimal performance. This is especially unfortunate when we consider that most code &lt;em&gt;does&lt;/em&gt; follow the rules, and only a small fraction of it uses exemptions.&lt;/p&gt; &lt;p&gt;Historically, C and C++ compilers were developed with the philosophy of trusting the programmer. As a result, few resources were devoted to verifying that code meets the underlying assumptions of our optimizations. This picture is starting to change as a result of widely publicized bugs. Still, compilers are only slowly adding checks before optimizing, to verify that the code is valid and that no exemptions have been misused. The efficacy of such checks also tends to be quite limited. Almost none have visibility into whole programs so that they can analyze at most one source file at a time.&lt;/p&gt; &lt;p&gt;To maximize the benefit of aliasing rules and minimize the risks of falling into the many traps I&amp;#8217;ve outlined in this series, I recommend writing code that strictly follows the rules and avoids relying on exemptions and extensions, unless it is necessary. Also, I suggest using the &lt;code&gt;-Wall&lt;/code&gt;, &lt;code&gt;-Wextra&lt;/code&gt;, or equivalent compiler options to enable warnings and resolve all of their instances.&lt;/p&gt; &lt;p&gt;Keep in mind that compilers are improving in their ability to uncover problems with every release. Always upgrade to the newest compiler version as early as it is feasible. Finally, if you find a bug that you think your compiler should be able to detect, submit a test case to the GCC &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/bugzilla/"&gt;Bugzilla&lt;/a&gt; (first-time submitters should read &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/bugs/"&gt;how to report bugs or enhancement requests&lt;/a&gt;) and ask the compiler&amp;#8217;s implementer to diagnose it. With increasing sensitivity to the consequences of undefined behavior, the chances are that someone will make an effort to ensure that bug is detectable in a future version of the compiler.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#038;title=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/06/03/the-joys-and-perils-of-aliasing-in-c-and-c-part-2/" data-a2a-title="The joys and perils of aliasing in C and C++, Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/03/the-joys-and-perils-of-aliasing-in-c-and-c-part-2/"&gt;The joys and perils of aliasing in C and C++, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JbEoSdUb1R4" height="1" width="1" alt=""/&gt;</content><summary>In the previous article, I discussed the benefits of C and C++ language restrictions in optimized code. In this second half, I present a variety of programming language exemptions and compiler extensions that developers can use to get around aliasing restrictions more or less safely. I will also discuss the common pitfalls of aliasing, both resulting from the extensions as well as from misuses of ...</summary><dc:creator>Martin Sebor</dc:creator><dc:date>2020-06-03T07:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/03/the-joys-and-perils-of-aliasing-in-c-and-c-part-2/</feedburner:origLink></entry><entry><title>Open Data Hub 0.6.1: Bug fix release to smooth out redesign regressions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_NVu5P24-dw/" /><category term="AI/ML" scheme="searchisko:content:tags" /><category term="Big Data" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="JupyterHub" scheme="searchisko:content:tags" /><category term="Kubeflow" scheme="searchisko:content:tags" /><category term="machine learning" scheme="searchisko:content:tags" /><category term="Open Data Hub" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><author><name>Václav Pavlín</name></author><id>searchisko:content:id:jbossorg_blog-open_data_hub_0_6_1_bug_fix_release_to_smooth_out_redesign_regressions</id><updated>2020-06-02T07:00:56Z</updated><published>2020-06-02T07:00:56Z</published><content type="html">&lt;p&gt;It is just a few short weeks since we &lt;a href="https://developers.redhat.com/blog/2020/05/07/open-data-hub-0-6-brings-component-updates-and-kubeflow-architecture/"&gt;released Open Data Hub (ODH) 0.6.0&lt;/a&gt;, bringing many changes to the underlying architecture and some new features. We found &lt;a target="_blank" rel="nofollow" href="https://github.com/orgs/opendatahub-io/projects/3"&gt;a few issues&lt;/a&gt; in this new version with the Kubeflow Operator and a few regressions that came in with the new JupyterHub updates. To make sure your experience with ODH 0.6 does not suffer because we wanted to release early, we offer a new (mostly) bugfix release: Open Data Hub 0.6.1.&lt;/p&gt; &lt;h2&gt;Operator&lt;/h2&gt; &lt;p&gt;Probably the most important bug fix went into the &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/opendatahub-operator/"&gt;Operator&amp;#8217;s code&lt;/a&gt; itself. The changes there are important for the project not only because of what they fix, but also because they prove our relationship with the Kubeflow community, since most of the code went directly &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl"&gt;upstream&lt;/a&gt;. We have also rebased our repository to make sure any new features in the Operator get in. Let’s take a look at a few things which have been fixed.&lt;/p&gt; &lt;h3&gt;Deleting namespace with the instance&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl/issues/241"&gt;This issue&lt;/a&gt; caused something you do not expect from the application in general. When a user deleted the KFDef custom resource, the Operator also deleted the namespace where the Open Data Hub had been deployed. This is definitely something we do not want since there might be other applications running in the namespace which ODH does not control. We filed the issue and worked with the community to get the Operator to behave correctly.&lt;/p&gt; &lt;h3&gt;Caches and collisions&lt;/h3&gt; &lt;p&gt;Kubeflow’s &lt;code&gt;kfctl&lt;/code&gt; tool downloads and caches the manifests locally so you do not need to download them on each command run. It also generates the Kustomize structure and manifests based on the KFDef content.&lt;/p&gt; &lt;p&gt;This flow works fine locally where you can manually move things around, but in the Operator it means that all of the KFDef custom resources use the same cache as the first one. After that, all of the instances were also deployed from the same generated Kustomize manifests. That behavior is obviously not right and causes &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl/issues/242"&gt;a lot of problems&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The new version of the Operator handles this problem much better. It puts the cache and Kustomize manifests in directories based on the namespace and KFDef name, and it also reloads the cache whenever necessary to accommodate any potential manifest changes.&lt;/p&gt; &lt;h3&gt;Building the Operator image&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl/pull/321"&gt;The last change&lt;/a&gt; we needed in the Operator is about how the image gets built. Since &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/operator-framework/operator-sdk"&gt;operator-sdk&lt;/a&gt;&lt;/code&gt; names the manager binary based on the cloned directory name, we needed to parameterize that in the Dockerfile to accommodate the change from &lt;code&gt;kfctl&lt;/code&gt; to &lt;code&gt;opendatahub-operator&lt;/code&gt;. Another change is our preference to run on top of the Universal Base Image (UBI), which is not the case with Kubeflow Operator, so we made the build process customizable to plug in &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl/blob/master/build/Dockerfile.ubi"&gt;alternative Dockerfiles&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Manifests&lt;/h2&gt; &lt;p&gt;We made a few updates in the &lt;code&gt;odh-manifests&lt;/code&gt; repository mainly to accommodate missing components and improve the documentation.&lt;/p&gt; &lt;h3&gt;READMEs&lt;/h3&gt; &lt;p&gt;We added basic descriptions to all of the components in the READMEs. Simply &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/"&gt;go to the repository&lt;/a&gt; and click on the component. You will see a README talking about the component purpose, its dependencies and configuration options, and examples on how to enable the component in the KFDef resource.&lt;/p&gt; &lt;h3&gt;JupyterHub&lt;/h3&gt; &lt;p&gt;As mentioned in our announcement for ODH 0.6.0, one of the JupyterHub dependencies—&lt;a target="_blank" rel="nofollow" href="https://github.com/vpavlin/jupyterhub-singleuser-profiles/"&gt;JupyterHub Singleuser Profiles&lt;/a&gt;—went through some changes and we found &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/issues/44"&gt;a few regressions&lt;/a&gt;. They were all fixed, including one that blocked the successful deployment of Jupyter notebook servers on GPU enabled nodes.&lt;/p&gt; &lt;h3&gt;AI Library and Seldon&lt;/h3&gt; &lt;p&gt;We omitted &lt;a target="_blank" rel="nofollow" href="http://opendatahub.io/docs/ai-library.html"&gt;AI Library&lt;/a&gt; from the previous release because we were missing Seldon, which is a dependency of AI Library. Since &lt;a target="_blank" rel="nofollow" href="https://catalog.redhat.com/software/operators/detail/5e9f1a3769aea31642b613f4"&gt;Seldon Operator&lt;/a&gt; was successfully certified recently, we were able to add it via the Operator Lifecycle Manager and thus enable AI Library again.&lt;/p&gt; &lt;h2&gt;Testing and continuous integration&lt;/h2&gt; &lt;p&gt;One of the main long-standing issues with Open Data Hub development and maintenance was the lack of automated testing for incoming pull requests (PRs). Because of this issue, all of our verifications were manual and took a lot of time. Since we began planning our move to GitHub, we held high hopes for OpenShift CI as a viable solution for our continuous integration infrastructure.&lt;/p&gt; &lt;p&gt;We are happy to share that we are now &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/blob/master/tests/TESTING.md"&gt;hooked into OpenShift CI&lt;/a&gt; and the &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/tree/master/tests"&gt;tests&lt;/a&gt; are running on all of the PRs in the &lt;code&gt;odh-manifests&lt;/code&gt; repository. We will work on adding more tests and keep an eye on new PRs to make sure they come with tests to avoid introducing regressions in the future.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#038;title=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" data-a2a-url="https://developers.redhat.com/blog/2020/06/02/open-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions/" data-a2a-title="Open Data Hub 0.6.1: Bug fix release to smooth out redesign regressions"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/02/open-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions/"&gt;Open Data Hub 0.6.1: Bug fix release to smooth out redesign regressions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_NVu5P24-dw" height="1" width="1" alt=""/&gt;</content><summary>It is just a few short weeks since we released Open Data Hub (ODH) 0.6.0, bringing many changes to the underlying architecture and some new features. We found a few issues in this new version with the Kubeflow Operator and a few regressions that came in with the new JupyterHub updates. To make sure your experience with ODH 0.6 does not suffer because we wanted to release early, we offer a new (mos...</summary><dc:creator>Václav Pavlín</dc:creator><dc:date>2020-06-02T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/02/open-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions/</feedburner:origLink></entry><entry><title>The joys and perils of C and C++ aliasing, Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OwSRFTCguyI/" /><category term="C" scheme="searchisko:content:tags" /><category term="C pointers" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="lvalue" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Visual C" scheme="searchisko:content:tags" /><author><name>Martin Sebor</name></author><id>searchisko:content:id:jbossorg_blog-the_joys_and_perils_of_c_and_c_aliasing_part_1</id><updated>2020-06-02T07:00:09Z</updated><published>2020-06-02T07:00:09Z</published><content type="html">&lt;p&gt;In C, C++, and some other programming languages, the term &lt;i&gt;aliasing&lt;/i&gt; refers to a situation where two different expressions or symbols refer to the same object. When references access that object in different ways—as both reads and stores—there are consequences for the order in which these &lt;i&gt;mixed accesses&lt;/i&gt; can happen. The value that is stored first is expected to be read by the subsequent access. In many instances, aliasing is harmless: It is common, safe, and usually optimally efficient to use two pointers of the same type to read, and even to write to the same object. But in some cases, using aliasing symbols for mixed accesses is less benign, and can adversely affect the correctness or efficiency of your code.&lt;/p&gt; &lt;p&gt;Although there are quite a few articles on this subject, most tend to focus on the rules and requirements outlined in the standards (such as the &lt;i&gt;strict aliasing&lt;/i&gt; rule). In this article, I focus on the details of the C and C++ language restrictions, their challenges and pitfalls, and examples demonstrating the restrictions&amp;#8217; beneficial effects in optimized code. In Part 2, I will present exemptions from aliasing, which can help you get around the restrictions more or less safely. I also consider some of the common pitfalls of aliasing and mixed accesses, and the actual problems these pitfalls might cause.&lt;/p&gt; &lt;p&gt;&lt;span id="more-707487"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;About the examples&lt;/h2&gt; &lt;p&gt;I use many small coding examples to illustrate my main points. The code is intentionally simplistic and not meant to be useful beyond illustrating the material. In addition, while optimization is the article&amp;#8217;s main topic, in most cases, it would be of negligible value to optimize the code examples unless you were executing many of them in close succession. That situation is often the case when such code appears in loops—in particular (but not exclusively), loops that might lend themselves to vectorization. I leave extending the examples to their more realistic &amp;#8220;loopy&amp;#8221; equivalents as an exercise for interested readers. Additionally, throughout the article, I include links to my examples on &lt;a target="_blank" rel="nofollow" href="https://godbolt.org"&gt;Compiler Explorer&lt;/a&gt; so that you can see how some popular compilers handle them. I encourage you to use that site to experiment with the examples. I&amp;#8217;d also like to take this opportunity to thank the site&amp;#8217;s authors for a remarkably helpful tool and service.&lt;/p&gt; &lt;p&gt;Some of the examples illustrate the effects of invalid code on optimization results. It&amp;#8217;s important to emphasize that invalid code results in undefined behavior for the entire program. The effects seen in small examples can and very likely will be different in more realistic programs. In more complex scenarios, these effects could be masked by the compiler&amp;#8217;s limited ability to follow the control flow or track the data flow through a program, translation unit, or function. Effects might also depend on the constant values or ranges of values of operands used in the code, all of which typically depends on factors such as optimization options, the target architecture, and the specific compiler and its version.&lt;/p&gt; &lt;h2 id="objects-and-types-in-c-and-c"&gt;Objects and types in C and C++&lt;/h2&gt; &lt;p&gt;Object models and type systems capture some of the most fundamental principles of the C and C++ languages. Both languages rely on &lt;i&gt;object identity&lt;/i&gt;: The fact that each named object is uniquely designated by its name, and that no other identifier denotes the same object. Because all objects must be distinct from each other, and because null is a valid pointer that doesn&amp;#8217;t point to any object, no two object addresses can be equal to one another, or to null. (The notable exception is the equality of the address of the first sub-object to that of its enclosing object. It is also possible that a pointer just past the end of one object will compare equal to one to an unrelated object that happens to be stored at that location, but that is happenstance and never guaranteed.)&lt;/p&gt; &lt;h3&gt;Access by compatible types&lt;/h3&gt; &lt;p&gt;Whether or not they have a name, all objects have a type, and their value can only be meaningfully interpreted within that type. It rarely makes sense to interpret, for example, an object of type &lt;code&gt;int&lt;/code&gt; as if it were a &lt;code&gt;float&lt;/code&gt;, or vice versa. Object values must be converted from one type to another (usually by casting) in order to be reinterpreted. But the objects themselves must only be accessed—that is, have their value stored or read—within their given type. For a declared object that has a name, the type is simply the type used to declare it. For a dynamically allocated object, the type (called the &lt;i&gt;effective type&lt;/i&gt;) is the type of the last store to the object.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;i&gt;same type&lt;/i&gt; requirement isn&amp;#8217;t entirely accurate because it doesn&amp;#8217;t capture an important subtlety: That signed and unsigned forms of the same underlying integer types are considered the same, as are differently qualified forms of the same underlying type. But those are minor details.&lt;/p&gt; &lt;h3&gt;The concept of size&lt;/h3&gt; &lt;p&gt;Related to the concept of a type is the notion of size. It is only possible to access objects, including member sub-objects and array elements, within the boundaries imposed by their size. In standard C and C++, the size of every object and type is nonzero, but some compiler extensions allow exceptions to this guarantee. In most cases, the size is determined by the object&amp;#8217;s type. It is useful to call out this constraint separately, however, because it is easily violated in accesses to aggregates (meaning structures, particularly arrays).&lt;/p&gt; &lt;p&gt;Informally, the term &lt;i&gt;aliasing&lt;/i&gt; in C and C++ programming most commonly refers to breaking the type rules I&amp;#8217;ve just introduced. Typically, aliasing means using a type other than the type of the value stored in it. When it involves arrays, aliasing might mean using an index value that&amp;#8217;s outside the bounds of the array and accessing another object stored adjacent to the array. In some cases, aliasing can also mean using an identifier to access an apparently different object than the one it declares. Both C and C++ outline a handful of exceptions where such accesses are permitted; but, those aside, the effects of aliasing are largely not defined. Compilers rely on programs abiding aliasing restrictions to optimize away costly memory reads. Bad things can happen when a program violates those restrictions. In the next sections, I&amp;#8217;ll show many examples of what I mean by that.&lt;/p&gt; &lt;h3 id="accesses-to-distinct-objects"&gt;Accesses to distinct objects&lt;/h3&gt; &lt;p&gt;To start, consider the following function (also see the &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/Wy3JyE"&gt;Accesses to distinct objects&lt;/a&gt;&lt;/i&gt; example in Compiler Explorer):&lt;/p&gt; &lt;pre&gt; extern int a[]; extern int b[]; int f (int i, int j) { int t = &lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;[i]; &lt;span style="color: #008000;"&gt;b&lt;/span&gt;[j] = 0; // cannot change a return &lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;[i] - t; // can be folded to zero }&lt;/pre&gt; &lt;p&gt;Most optimizing compilers, including GNU Compiler Collection (GCC), replace the &lt;code&gt;a[i] - t&lt;/code&gt; expression with the constant zero, because &lt;code&gt;a&lt;/code&gt; and&lt;code&gt;b&lt;/code&gt; designate distinct objects that cannot alias. Regardless of the array indices&amp;#8217; values, no valid store to one can change the value of the other. Therefore, &lt;code&gt;a[i]&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; must be equal, and the result of the subtraction must be zero. The same optimization wouldn&amp;#8217;t be possible if either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; were pointers to the same type, because both could point to the same object; in other words, they could alias.&lt;/p&gt; &lt;p&gt;There isn&amp;#8217;t much a program can do to run afoul of this optimization—unless it is improperly using one of the common compiler extensions. I&amp;#8217;ll show examples of such extensions when I discuss aliases and weak symbols in Part 2.&lt;/p&gt; &lt;h3 id="accesses-via-incompatible-types"&gt;Accesses by incompatible types&lt;/h3&gt; &lt;p&gt;When pointers point to distinct types, as demonstrated by the function in the next example, GCC and most other compilers will optimize the result to zero (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/Cmg5a3"&gt;Accesses via pointers to incompatible types&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int f (int *a, long *b) { int t = *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;; *&lt;span style="color: #008000;"&gt;b&lt;/span&gt; = 0; // cannot change *a return *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt; - t; // can be folded to zero } &lt;/pre&gt; &lt;p&gt;Because &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are declared to be pointers to incompatible types, and because C and C++ require that objects have their stored value accessed only by an lvalue of a compatible type, the store to &lt;code&gt;*b&lt;/code&gt; cannot affect the value of &lt;code&gt;*a&lt;/code&gt; cached in the variable &lt;code&gt;t&lt;/code&gt;, which is typically a register. Therefore, the operands in the subtraction expression must be equal, and the result must be zero.&lt;/p&gt; &lt;p&gt;This requirement applies when accessing members of incompatible type structure, even if the member types are compatible. Thus, in the following example, the compiler can fold the &lt;code&gt;return&lt;/code&gt; expression to zero. It works because the structure types are distinct for the members being accessed (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/7d8MCz"&gt;Accesses to members of incompatible structs&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int i; }; struct B { int i; }; int f (struct A *a, struct B *b) { int t = &lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;-&amp;#62;i; &lt;span style="color: #339966;"&gt;b&lt;/span&gt;-&amp;#62;i = 0; // cannot change a-&amp;#62;i return &lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;-&amp;#62;i - t; // can be folded to zero } &lt;/pre&gt; &lt;p&gt;It&amp;#8217;s important to keep in mind that the optimization I just showed wouldn&amp;#8217;t be valid if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; pointed to the same type—unless they were declared using &lt;code&gt;restrict&lt;/code&gt;. (I&amp;#8217;ll talk more about the &lt;code&gt;restrict&lt;/code&gt; keyword soon.) It should now be obvious that calling &lt;code&gt;f&lt;/code&gt; against the rules with &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; pointing to the same object would still return zero, regardless of the object&amp;#8217;s initial value. But such an outcome would likely be surprising to the unsuspecting programmer and result in a bug. It&amp;#8217;s the main reason why we are only allowed to access objects by the lvalues of their type.&lt;/p&gt; &lt;p&gt;It is also instructive to see what might happen if a function like &lt;code&gt;f&lt;/code&gt; were called with the same pointer. Such a call would be invalid because of the requirement to access every object by an lvalue of its type. The code&amp;#8217;s behavior would necessarily be undefined, and we would need to consider any expectations of the code&amp;#8217;s behavior in that light.&lt;/p&gt; &lt;p&gt;It seems reasonable to expect a compiler to report a violation of this requirement upon detecting one. However, none of the popular compilers issue such a warning (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/iwPg9P"&gt;Invalid access via a pointer to an incompatible type&lt;/a&gt;&lt;/i&gt;).&lt;/p&gt; &lt;h3 id="accesses-to-distinct-array-elements"&gt;Accesses to distinct array elements&lt;/h3&gt; &lt;p&gt;As shown in the following example, a compiler can also fold the &lt;code&gt;return&lt;/code&gt; expression to zero (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/spSF8e"&gt;Accesses to distinct array elements of a matrix&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int a[2][2]; int f (int i, int j) { int t = a[&lt;span style="color: #ff0000;"&gt;1&lt;/span&gt;][j]; a[&lt;span style="color: #008000;"&gt;0&lt;/span&gt;][i] = 0; // cannot change a[1] return a[&lt;span style="color: #ff0000;"&gt;1&lt;/span&gt;][j] - t; // can be folded to zero } &lt;/pre&gt; &lt;p&gt;This time, the rationale is more subtle: It depends on the requirement that the index in every access must be within the bounds of the array at each dimension. The two arrays involved in the accesses in the function—namely &lt;code&gt;a[0]&lt;/code&gt; and &lt;code&gt;a[1]&lt;/code&gt;—are distinct elements of the larger array &lt;code&gt;a&lt;/code&gt;, so they must not alias one another. A store to either of the two elements of &lt;code&gt;a[0]&lt;/code&gt; cannot affect the value of either element of &lt;code&gt;a[1]&lt;/code&gt;. Consequently, the invalid call &lt;code&gt;f (2, 0)&lt;/code&gt; would likely return an unexpected result if &lt;code&gt;a[1][0]&lt;/code&gt; were initially nonzero. The &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Warning-Options.html#index-Warray-bounds"&gt;-Warray-bounds&lt;/a&gt; warning seen in the modified example detects a subset of these invalid array references (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/pRLqRF"&gt;Overlapping access to distinct array elements of a matrix&lt;/a&gt;&lt;/i&gt;).&lt;/p&gt; &lt;h3 id="accesses-to-array-members"&gt;Accesses to member arrays&lt;/h3&gt; &lt;p&gt;Conceptually, every ordinary non-array object can be viewed as an element of a one-element array. The only difference between the two is syntactic. In addition, because every object is represented in memory as a continuous sequence of bytes, we can consider every object—including a &lt;code&gt;struct&lt;/code&gt; and its members—to be such a sequence. However, except for the special case of accesses by character types (see &amp;#8220;Aliasing by character types&amp;#8221; in Part 2), we must confine access to an array member to the bounds of the array. It is not valid to view an array member as aliasing other members adjacent to it. As an example, consider the following function (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/Aaqz_R"&gt;Access to a member array&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; struct A { char a[8], b; }; int f (struct A *p, const char *s) { int t = p-&amp;#62;&lt;span style="color: #ff0000;"&gt;b&lt;/span&gt;; for (int i = 0; ; ++i) if (!(p-&amp;#62;&lt;span style="color: #339966;"&gt;a&lt;/span&gt;[i] = s[i])) // cannot change p-&amp;#62;b break; return p-&amp;#62;&lt;span style="color: #ff0000;"&gt;b&lt;/span&gt; - t; // can be folded to zero } &lt;/pre&gt; &lt;p&gt;In this example, the &lt;code&gt;for&lt;/code&gt; loop assignments to &lt;code&gt;p-&amp;#62;a[i]&lt;/code&gt; may only modify elements of the &lt;code&gt;p-&amp;#62;a&lt;/code&gt; array. Similar to the previous example, we are not permitted to write outside the boundaries of a sub-object and into adjacent members of the &lt;code&gt;struct&lt;/code&gt;. The issue is not the potential for padding between the members, but that writing outside the boundaries of the sub-object would imply that distinctly named objects would alias. Because of this restriction, the compiler can again fold the subtraction in the &lt;code&gt;return&lt;/code&gt; statement to zero. You will find this optimization in both GNU Compiler Collection (GCC) and Intel C++ Compiler (ICC).&lt;/p&gt; &lt;h2 id="further-restrictions"&gt;Further restrictions&lt;/h2&gt; &lt;p&gt;General restrictions in the C and C++ languages enable compilers to optimize for many use cases. However, programmers often must satisfy even stricter constraints in our code, which compilers may not be able to infer without additional annotations. In this section, we will consider annotations that are either specified by the language standards or provided as compiler extensions.&lt;/p&gt; &lt;h3 id="the-restrict-keyword"&gt;The &lt;code&gt;restrict&lt;/code&gt; keyword&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;restrict&lt;/code&gt; keyword is a type qualifier in C. Although C++ doesn&amp;#8217;t formally specify it, compilers commonly support it under the alternate syntax of &lt;code&gt;__restrict&lt;/code&gt; or &lt;code&gt;__restrict__&lt;/code&gt;. We can apply this qualifier to pointers, and also to references in C++. In either case, adding the qualifier indicates that the referred objects are not both read from and written to via distinct expressions. We can also assume that these expressions are not based on the same pointer.&lt;/p&gt; &lt;p&gt;The formal definition of &lt;code&gt;restrict&lt;/code&gt; is somewhat involved, but the basic use case is straightforward: It is used to qualify one or more function-pointer arguments to indicate that the function accesses objects that do not overlap. In C++, the use case could include the &lt;code&gt;this&lt;/code&gt; pointer, as well as any reference arguments. As an example, here&amp;#8217;s &lt;code&gt;restrict&lt;/code&gt; used in a declaration of the standard &lt;code&gt;strcpy&lt;/code&gt; function:&lt;/p&gt; &lt;pre&gt; char* strcpy (char * restrict &lt;i&gt;dst&lt;/i&gt;, const char * restrict &lt;i&gt;src&lt;/i&gt;); &lt;/pre&gt; &lt;p&gt;This declaration expresses the constraint that the function may not store into any element of the array that &lt;code&gt;dst&lt;/code&gt; points to, which it also reads from through &lt;code&gt;src&lt;/code&gt;. Because compilers usually &amp;#8220;know&amp;#8221; the effects of many standard functions, this constraint is mainly useful for user-defined functions. So, for instance, using &lt;code&gt;restrict&lt;/code&gt; to declare the pointer arguments would open up the optimization opportunity shown in the example of &lt;a href="#accesses-via-incompatible-types"&gt;Accesses via pointers to incompatible types&lt;/a&gt;, even to pointers to the same type (also see&lt;i&gt; &lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/En-Zhi"&gt;Access by restricted pointers&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int f (int * restrict a, int * restrict b) { int t = *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;; *&lt;span style="color: #339966;"&gt;b&lt;/span&gt; = 0; // cannot change *a return *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt; - t; // can be folded to zero } &lt;/pre&gt; &lt;p&gt;Naturally, passing &lt;code&gt;f&lt;/code&gt; the address of the same object (or in fact, even distinct addresses that would result in overlapping accesses by the function) violates the restriction and causes an unexpected result (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/rSdrSd"&gt;Violating restricted pointers&lt;/a&gt;&lt;/i&gt;). The GCC &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Warning-Options.html#index-Wrestrict"&gt;-Wrestrict&lt;/a&gt; warning detects this problem when &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; overlap exactly, but only when the two pointers are one and the same object. Despite the warning, GCC still folds the subtraction into zero. That&amp;#8217;s because it only detects the problem at the point of the call to &lt;code&gt;f&lt;/code&gt;, and even that only under very limited circumstances. It does not diagnose the equivalent call in function &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt; &lt;h3 id="the-restrict-keyword-and-const"&gt;The &lt;code&gt;restrict&lt;/code&gt; keyword and &lt;code&gt;const&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;Using &lt;code&gt;restrict&lt;/code&gt; to declare function-pointer arguments is useful for optimizing the body of a function. We can also use this syntax to enable optimizations in function callers. Combined with the &lt;code&gt;const&lt;/code&gt; qualifier, a &lt;code&gt;restrict&lt;/code&gt;-qualified pointer expresses the following constraint: That if the object it points to is accessed by any means, it cannot be modified during the lifetime of the pointer itself.&lt;/p&gt; &lt;p&gt;Because &lt;code&gt;f&lt;/code&gt; cannot modify the object its argument points to, it is possible for a compiler to fold the &lt;code&gt;return&lt;/code&gt; expression in the following function to zero (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/o9-mxV"&gt;Restricted const pointer parameters&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; void f (const int * restrict); int g (int *a) { int t = *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;; f (&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;); // cannot change *a return *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt; - t; // can be folded to zero } &lt;/pre&gt; &lt;p&gt;If you check the live demo for this example, you will see that the compilers I tested do not yet leverage this optimization.&lt;/p&gt; &lt;p&gt;Restricting &lt;code&gt;const&lt;/code&gt; pointer parameters wouldn&amp;#8217;t be safe in the absence of the &lt;code&gt;restrict&lt;/code&gt; qualifier. First, the language doesn&amp;#8217;t prevent modifying objects that are pointed to by &lt;code&gt;const&lt;/code&gt;-qualified pointers, unless the objects themselves are declared &lt;code&gt;const&lt;/code&gt;. Because of this, it is valid for a program to cast the &lt;em&gt;constness&lt;/em&gt; of the pointer away and use the result to modify the object. Second, let&amp;#8217;s say that we tried the example above without &lt;code&gt;restrict&lt;/code&gt;. If function &lt;code&gt;f&lt;/code&gt; had a way to access the object pointed to by &lt;code&gt;p&lt;/code&gt;, by some other means than through &lt;code&gt;p&lt;/code&gt;, it could modify it even without casting the constness of its argument away. Using the &lt;code&gt;restrict&lt;/code&gt; qualifier, in conjunction with the read from &lt;code&gt;*a&lt;/code&gt; in &lt;code&gt;g&lt;/code&gt;, rules out both of those possibilities; it effectively guarantees that the call to &lt;code&gt;f&lt;/code&gt; will not modify by any means the object whose address it has passed.&lt;/p&gt; &lt;p&gt;In standard C, we can apply the &lt;code&gt;restrict&lt;/code&gt; keyword just as effectively at the function-prototype scope and at block scope. Thanks to its transitive nature, we can use &lt;code&gt;restrict&lt;/code&gt; to express aliasing guarantees, even without modifying the API. For instance, the following function (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/FDPETX"&gt;Restricted local const pointer variables&lt;/a&gt;&lt;/i&gt;) is equivalent to the previous code, and can be similarly optimized:&lt;/p&gt; &lt;pre&gt; void f (int *); int g (int *a) { const int * restrict p = a; int t = *p; f (a); // cannot change *a return *a - t; // can be folded to zero } &lt;/pre&gt; &lt;p&gt;As in the previous example, no compiler, including GCC, uses this restriction to optimize code.&lt;/p&gt; &lt;h3 id="a-closing-thought-about-restrict"&gt;A closing thought about &lt;code&gt;restrict&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;If &lt;code&gt;f&lt;/code&gt; were to modify the object that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; point to, any optimization assumptions the compiler made based on the &lt;code&gt;restrict&lt;/code&gt; keyword (such as folding the &lt;code&gt;return&lt;/code&gt; expression to zero) would result in undefined behavior. In view of that, one might hope that compilers would at least detect the most obvious misuses of &lt;code&gt;restrict&lt;/code&gt; and issue a warning. Unfortunately, no known compiler does. As a result, &lt;code&gt;restrict&lt;/code&gt; is as dangerous as it is useful.&lt;/p&gt; &lt;h3 id="attribute-const-pure-and-noalias"&gt;Attributes &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;pure&lt;/code&gt;, and &lt;code&gt;noalias&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;Some compilers provide extensions to specify additional aliasing restrictions. GCC and compatible compilers support the &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Common-Function-Attributes.html#index-const-function-attribute"&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Common-Function-Attributes.html#index-pure-function-attribute"&gt;&lt;code&gt;pure&lt;/code&gt;&lt;/a&gt; function attributes. We can use these attributes as an optimization hint, declaring a function that either doesn&amp;#8217;t access observable program state at all (attribute &lt;code&gt;const&lt;/code&gt;) or does so only by reading the objects referenced by that function&amp;#8217;s pointer arguments (attribute &lt;code&gt;pure&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Visual C/C++ and compatible compilers support using &lt;code&gt;__declspec(noalias)&lt;/code&gt; to declare that, similar to attribute &lt;code&gt;pure&lt;/code&gt;, a function doesn&amp;#8217;t access program state except by dereferencing its pointer arguments. Consider the effect of these hints in the program below (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/QC99dU"&gt;Restricting aliasing by function&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; #if __GNUC__ # define NOALIAS __attribute__ ((pure)) #elif _MSC_VER # define NOALIAS __declspec (noalias) #else # error NOALIAS not supported #endif NOALIAS int f (int *); int g (int *a) { int t = *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt;; int x = 1; x = &lt;span style="color: #339966;"&gt;f&lt;/span&gt; (&amp;#38;x); // can be eliminated return *&lt;span style="color: #ff0000;"&gt;a&lt;/span&gt; - t ? x : 0; // can be folded to zero } &lt;/pre&gt; &lt;p&gt;We can assume the call &lt;code&gt;f (&amp;#38;x)&lt;/code&gt; does not change any program state except for &lt;code&gt;x&lt;/code&gt; itself, so we know the expression &lt;code&gt;*a - t&lt;/code&gt; can be folded to zero; and therefore, so can the entire &lt;code&gt;return&lt;/code&gt; statement. Consequently, given the function does not use the value of &lt;code&gt;x&lt;/code&gt;, we can also eliminate the call to &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;As an experiment, it is instructive to see what might happen when the &lt;code&gt;noalias&lt;/code&gt; violates the requirement not to change the program state. Unfortunately, despite being obvious, none of the tested compilers diagnoses this bug (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/rRMyQy"&gt;Violating function aliasing restriction&lt;/a&gt;&lt;/i&gt;). Some appear to detect and act on it, while others try to mitigate it only in some contexts. Other compilers ignore it completely. Given that undefined behavior is the consequence of violating an explicit requirement, none of this should be terribly surprising, except perhaps the lack of a diagnostic. It isn&amp;#8217;t difficult for a compiler to detect when a function modifies non-local state, contrary to the &lt;code&gt;pure&lt;/code&gt; or &lt;code&gt;noalias&lt;/code&gt; requirement. Regrettably, as of now, none does.&lt;/p&gt; &lt;h2&gt;Conclusion to Part 1&lt;/h2&gt; &lt;p&gt;In Part 1 of this article, I focused on the details of C and C++ language restrictions and their beneficial effects in optimized code. In Part 2, I will present a variety of exemptions found in popular compilers, that developers can use to get around aliasing restrictions more or less safely. I will also discuss some of the common pitfalls of aliasing and mixed accesses, and some of the problems these pitfalls might cause.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fthe-joys-and-perils-of-c-and-c-aliasing-part-1%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20C%20and%20C%2B%2B%20aliasing%2C%20Part%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fthe-joys-and-perils-of-c-and-c-aliasing-part-1%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20C%20and%20C%2B%2B%20aliasing%2C%20Part%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fthe-joys-and-perils-of-c-and-c-aliasing-part-1%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20C%20and%20C%2B%2B%20aliasing%2C%20Part%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fthe-joys-and-perils-of-c-and-c-aliasing-part-1%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20C%20and%20C%2B%2B%20aliasing%2C%20Part%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fthe-joys-and-perils-of-c-and-c-aliasing-part-1%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20C%20and%20C%2B%2B%20aliasing%2C%20Part%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fthe-joys-and-perils-of-c-and-c-aliasing-part-1%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20C%20and%20C%2B%2B%20aliasing%2C%20Part%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fthe-joys-and-perils-of-c-and-c-aliasing-part-1%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20C%20and%20C%2B%2B%20aliasing%2C%20Part%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fthe-joys-and-perils-of-c-and-c-aliasing-part-1%2F&amp;#038;title=The%20joys%20and%20perils%20of%20C%20and%20C%2B%2B%20aliasing%2C%20Part%201" data-a2a-url="https://developers.redhat.com/blog/2020/06/02/the-joys-and-perils-of-c-and-c-aliasing-part-1/" data-a2a-title="The joys and perils of C and C++ aliasing, Part 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/02/the-joys-and-perils-of-c-and-c-aliasing-part-1/"&gt;The joys and perils of C and C++ aliasing, Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OwSRFTCguyI" height="1" width="1" alt=""/&gt;</content><summary>In C, C++, and some other programming languages, the term aliasing refers to a situation where two different expressions or symbols refer to the same object. When references access that object in different ways—as both reads and stores—there are consequences for the order in which these mixed accesses can happen. The value that is stored first is expected to be read by the subsequent access. In ma...</summary><dc:creator>Martin Sebor</dc:creator><dc:date>2020-06-02T07:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/02/the-joys-and-perils-of-c-and-c-aliasing-part-1/</feedburner:origLink></entry><entry><title>How the fabric8 Maven plug-in deploys Java applications to OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AYpi7gOHdaM/" /><category term="CI/CD" /><category term="DevOps" /><category term="Java" /><category term="Kubernetes" /><category term="apache maven" /><category term="builder image" /><category term="fabric8" /><category term="openshift" /><author><name>kboone</name></author><id>https://developers.redhat.com/blog/?p=718217</id><updated>2020-06-02T04:45:01Z</updated><published>2020-06-02T04:45:01Z</published><content type="html">&lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://fabric8.io/"&gt;fabric8 Maven plug-in&lt;/a&gt;, often abbreviated FMP, can be added to a Maven Java project and takes care of the administrative tasks involved in deploying the application to a &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; cluster. These tasks include:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Creating an OpenShift build configuration (BC).&lt;/li&gt; &lt;li&gt;Coordinating the source-to-image (S2I) process to create a container image from the application&amp;#8217;s compiled bytecode.&lt;/li&gt; &lt;li&gt;Creating and instantiating a deployment configuration (DC) from information in the project.&lt;/li&gt; &lt;li&gt;Defining and instantiating OpenShift services and routes.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;All of the relevant components of this process are well-documented individually. This article pulls together documentation sources to create an overview of how the plug-in works, and the structure of the image it generates—which might make the plug-in easier to use and troubleshoot.&lt;/p&gt; &lt;p&gt;&lt;span id="more-718217"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;A note about versions&lt;/h2&gt; &lt;p&gt;There are subtly-different upstream and Red Hat versions of the fabric8 Maven plug-in. They differ not only in how they are configured and used but also in the set-up required on OpenShift. In particular, the plug-in assumes that certain container images will be available in the OpenShift installation. The Red Hat and upstream versions make different assumptions in this regard.&lt;/p&gt; &lt;p&gt;This article focuses on the Red Hat version. The OpenShift setup for this plug-in is &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.5/html-single/fuse_on_openshift_guide/index#install-fuse-on-openshift3"&gt;documented here for OpenShift 3&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.5/html-single/fuse_on_openshift_guide/index#install-fuse-on-openshift4"&gt;here for OpenShift 4&lt;/a&gt;, although later versions might be available.&lt;/p&gt; &lt;p&gt;Not all of the documented setup is required simply to use the deployment plug-in—the mandatory part is installing the image streams. Of course, you might need the rest of the installation for other purposes.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also check out this quick &lt;a href="https://developers.redhat.com/blog/2020/05/20/getting-started-with-the-fabric8-kubernetes-java-client/"&gt;Getting started with the fabric8 Kubernetes Java client&lt;/a&gt; article for more information.&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;Adding the plug-in to a Maven project&lt;/h2&gt; &lt;p style="text-align: left;"&gt;To use the FMP in zero-configuration mode, just add the &lt;code&gt;plugin&lt;/code&gt; specification to a Maven &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;build&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.jboss.redhat-fuse&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;fabric8-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${fuse.bom.version}&amp;#60;/version&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; ...&lt;/pre&gt; &lt;p style="text-align: left;"&gt;Doing this makes the Maven operations &lt;code&gt;fabric8:deploy&lt;/code&gt;, &lt;code&gt;fabric8:build&lt;/code&gt;, etc., available. In order to make build and deployment a one-step operation, we can bind the various goals like this:&lt;/p&gt; &lt;pre&gt; &amp;#60;plugin&amp;#62; ... &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;id&amp;#62;fabric8&amp;#60;/id&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;resource&amp;#60;/goal&amp;#62; &amp;#60;goal&amp;#62;build&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; ....&lt;/pre&gt; &lt;p style="text-align: left; padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Different versions of the Maven fabric8 plug-in have subtle differences in the dependencies between goals, and this binding configuration is not always needed.&lt;/p&gt; &lt;p style="text-align: left;"&gt;In the zero-configuration mode of operations, the Maven fabric8 plug-in is (like everything else in Maven) &lt;em&gt;opinionated&lt;/em&gt;. This mode makes many assumptions about the structure of its input, and how it should operate. However, many configuration parameters are available to tune its behavior. For example, OpenShift resource limits can be set in the plug-in configuration in &lt;code&gt;pom.xml&lt;/code&gt; like this:&lt;/p&gt; &lt;pre&gt; &amp;#60;configuration&amp;#62; &amp;#60;resources&amp;#62; &amp;#60;openshiftBuildConfig&amp;#62; &amp;#60;limits&amp;#62; &amp;#60;cpu&amp;#62;100m&amp;#60;/cpu&amp;#62; &amp;#60;memory&amp;#62;256Mi&amp;#60;/memory&amp;#62; &amp;#60;/limits&amp;#62; &amp;#60;/openshiftBuildConfig&amp;#62; &amp;#60;/resources&amp;#62; &amp;#60;/configuration&amp;#62;&lt;/pre&gt; &lt;p style="text-align: left;"&gt;An alternative approach to configuring the resulting OpenShift deployment is to include YAML fragments in the application source, as explained in the next section.&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;Starting a deployment&lt;/h2&gt; &lt;p style="text-align: left;"&gt;In simple cases, we can initiate a full assembly and deployment to OpenShift like this:&lt;/p&gt; &lt;pre&gt;$ mvn fabric8:deploy&lt;/pre&gt; &lt;p style="text-align: left;"&gt;After the regular Maven build, the fabric8 Maven plug-in creates (in due course) an OpenShift image and domain configuration. The DC specifies one replica (pod) by default. All of the OpenShift entities created will have names based on the Maven artifact ID in &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt; &lt;p style="text-align: left;"&gt;Note that the plugin does not use the &lt;code&gt;oc&lt;/code&gt; command. However, unless we provide a specific configuration, fabric8 will use the information that &lt;code&gt;oc&lt;/code&gt; stores about the user credentials and OpenShift namespace. This information is typically stored in &lt;code&gt;$HOME/.kube/config&lt;/code&gt;. In practice, then, it is usual to run the Maven deployment after &lt;code&gt;oc login&lt;/code&gt; and &lt;code&gt;oc project&lt;/code&gt;.&lt;/p&gt; &lt;h2 style="text-align: left;"&gt;The deployment process&lt;/h2&gt; &lt;p style="text-align: left;"&gt;In outline, the FMP uses the binary source-to-image (binary S2I) process to create an OpenShift image containing the binaries supplied by the regular Maven build. In many cases, the application&amp;#8217;s binary will be a &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; &lt;em&gt;fat&lt;/em&gt; (self-contained) JAR. In such cases, the S2I process passes the fat JAR to a builder image, which creates a new image. This image contains the fat JAR, the JVM, and various scripts. Not all application types are supported by the plug-in result in a fat JAR. In some cases, the plug-in may have a more substantial assembly task before it can deploy anything to OpenShift.&lt;/p&gt; &lt;p style="text-align: left; padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;fabric8:deploy&lt;/code&gt; target implies &lt;code&gt;fabric8:build&lt;/code&gt;, &lt;code&gt;fabric8:resource&lt;/code&gt;, and &lt;code&gt;fabric8:apply&lt;/code&gt;.&lt;/p&gt; &lt;p style="text-align: left;"&gt;The &lt;code&gt;fabric8:build&lt;/code&gt; step invokes OpenShift to generate an image stream for the application. The plug-in creates and installs an OpenShift build configuration (BC) whose name is the Maven artifact name with &lt;code&gt;-s2i&lt;/code&gt; appended. The BC specifies the base image for the build.&lt;/p&gt; &lt;p style="text-align: left;"&gt;Examining a typical BC in YAML format, we see:&lt;/p&gt; &lt;pre&gt; strategy: sourceStrategy: from: kind: ImageStreamTag name: fuse7-java-openshift:1.5 namespace: openshift type: Source&lt;/pre&gt; &lt;p style="text-align: left;"&gt;The BC indicates that OpenShift will build the image using the (binary) source-to-image strategy, with &lt;code&gt;fuse7-java-openshift&lt;/code&gt; as the builder image. This same builder image is used for all the fat-JAR project types.&lt;/p&gt; &lt;p style="text-align: left;"&gt;When the plug-in has created the BC, it invokes a build on it. This results in a build pod being instantiated and executed. The build pod will have a name of the form:&lt;/p&gt; &lt;pre&gt; [artifact_id]-s2i-NNN-build &lt;/pre&gt; &lt;p style="text-align: left;"&gt;where NNN is the build number. All being well, the build pod runs to completion and results in a new image. If this is the first build, it will create a new image stream for the image. However, the image cannot yet be instantiated into a pod, because there is no deployment configuration.&lt;/p&gt; &lt;p style="text-align: left;"&gt;Regardless of the project type, by default, the application&amp;#8217;s compiled binaries end up in the generated pod&amp;#8217;s &lt;code&gt;/deployments&lt;/code&gt; directory. Other supporting infrastructure may also be placed in that directory if the project type requires it.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;fabric8:resource&lt;/code&gt; step generates the specific OpenShift resources needed to specify how the application is instantiated in a pod. These resources are written in YAML format and will always contain a deployment configuration. Other OpenShift resources, such as service definitions, can also be generated at this stage. The &lt;code&gt;fabric8:resource&lt;/code&gt; operation is primarily local &amp;#8212; it generates files in the project&amp;#8217;s &lt;code&gt;target/&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;fabric8:apply&lt;/code&gt; step takes the configuration generated by the &lt;code&gt;resource&lt;/code&gt; step and applies it to the OpenShift installation. The primary step here is the instantiation of the DC generated by the &lt;code&gt;resource&lt;/code&gt; step on OpenShift. This DC will have the same name as the Maven artifact, and specify the image generated by the builder as its container. This step should result in a single pod running the application.&lt;/p&gt; &lt;p&gt;It is a peculiarity of the S2I process that the image created by the builder is derived from the builder itself. The generated image will be almost an exact copy of the builder, with the addition of the executable application code and some configuration. As a result, the OpenShift images created by the FMP will contain a complete installation of Maven and a Java compiler, even though they will never be used. Various techniques are available for post-processing images to remove this unnecessary content.&lt;/p&gt; &lt;h2&gt;Generators&lt;/h2&gt; &lt;p&gt;The Maven fabric8 plug-in can produce images based on &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt;, Karaf, &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform (JBoss EAP)&lt;/a&gt;, plain Java, and other project types. Pluggable &lt;em&gt;generators&lt;/em&gt; are used to control the process of building OpenShift-ready binaries from the Maven project and providing the appropriate configuration. I will outline the Java, Spring Boot, and Karaf generators in particular because the similarities and differences between them are instructive.&lt;/p&gt; &lt;p&gt;Unless configured otherwise, all installed generators are available and will be activated through certain project features. For example, the Spring Boot generator is activated by the presence in the project of a &lt;code&gt;spring-boot-starter&lt;/code&gt; dependency. If none of the other, more specific generators are activated, the project may be treated as a plain Java executable. For a project to be treated as plain Java, it must produce a single JAR with a &lt;code&gt;Main-Class&lt;/code&gt; attribute in its manifest.&lt;/p&gt; &lt;p&gt;If the Maven project does not activate any generators, that mistake might not cause the build to fail, which can be rather confusing. The build might appear to succeed, yet not have any effect on OpenShift. As a result, you might see a warning message like this:&lt;/p&gt; &lt;pre&gt; [WARNING] F8: No image build configuration found or detected&lt;/pre&gt; &lt;p&gt;To some extent, the choice of generators can be controlled in configuration, if the plug-in does not select the correct one. Each generator has its own specific configuration that can be used to fine-tune its operation. Unless it is overridden in configuration, the generator will select the builder image to use.&lt;/p&gt; &lt;p&gt;At present all stand-alone Java applications, including Spring Boot, get &lt;code&gt;fuse7-java-openshift&lt;/code&gt; as the builder. Karaf- and EAP-applications get their own specific builders.&lt;/p&gt; &lt;h3&gt;Java generator&lt;/h3&gt; &lt;p&gt;Java is the most fundamental of all the supported project types. The generator can create a Maven deployment from any self-contained executable JAR file, creating a rudimentary DC that specifies a single replica (pod) with the rolling update strategy. The DC:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Exposes various ports: 9779 for the Prometheus monitoring tool and 8778 for the Jolokia JMX agent. These services are enabled by default in the generated image, as I will explain later.&lt;/li&gt; &lt;li&gt;Exposes port 8080, lacking any other configuration. It has no particular reason to do so, except that this is a popular port for applications that service HTTP requests.&lt;/li&gt; &lt;li&gt;Does not create liveness or readiness probes. The generator has no way to guess suitable values for these, if they even exist.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Spring Boot generator&lt;/h3&gt; &lt;p&gt;The Spring Boot generator is a specialization of the Java generator and shares most of the same configuration. Like the Java generator, the Spring Boot generator takes a fat JAR as its input. However, the Spring Boot generator is aware of certain conventions in the way Spring Boot applications are typically structured. It can thus provide a more effective DC for this type of application.&lt;/p&gt; &lt;p&gt;For example, if the &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; dependency is included in the project, the generator assumes that the actuator health check endpoints can be used for liveness and readiness probes. The generated DC will contain the following additional configuration:&lt;/p&gt; &lt;pre&gt; readinessProbe: failureThreshold: 3 httpGet: path: /health port: 8080&lt;/pre&gt; &lt;p&gt;Port 8080 is the default, which might not be appropriate. If the actuator is enabled, the generator will also read &lt;code&gt;application.properties&lt;/code&gt; from the application&amp;#8217;s source, to determine if there is a setting like this:&lt;/p&gt; &lt;pre&gt;management.port=8081&lt;/pre&gt; &lt;p&gt;If this setting exists, it is used in the DC for the liveness/readiness probes. Other ports might be exposed in the DC if the Spring Boot configuration suggests them.&lt;/p&gt; &lt;p&gt;It should be clear that the Spring Boot generator relies on the developer following established conventions about source format. However, since the Spring Boot Maven build more-or-less enforces the use of these conventions, there is probably no additional work to do to use the plug-in.&lt;/p&gt; &lt;h3&gt;Karaf generator&lt;/h3&gt; &lt;p&gt;Unlike the Spring Boot and Java generators, the Karaf generator does not take a self-contained executable JAR as its input. Instead, it takes one or more OSGi bundles. These are still JAR files, but with specific OSGi-compliant meta-data that describes the interaction contract between the bundles.&lt;/p&gt; &lt;p&gt;OSGi applications need a supporting framework; that is the role played by Karaf.&lt;/p&gt; &lt;p&gt;The presence of specific metadata in the application JARs makes it impractical to deploy a single, self-contained JAR that also contains the Karaf framework. Instead, the Karaf generator copies an entire Karaf installation into &lt;code&gt;target/assembly/&lt;/code&gt;. It then transfers this setup to the generated image along with the application&amp;#8217;s JARs. All of this content ends up in the &lt;code&gt;/deployments&lt;/code&gt; directory, along with scripts for starting Karaf with the application&amp;#8217;s bundles.&lt;/p&gt; &lt;p&gt;The Karaf installation that is generated includes a general HTTP server on port 8181. This typically services not only application components, but also parts of the Karaf infrastructure. This port can be used for health checks, and the generated DC will specify liveness and readiness probes based on those health checks.&lt;/p&gt; &lt;h2&gt;Services and routes&lt;/h2&gt; &lt;p&gt;As we&amp;#8217;ve seen, the various generators will expose ports in the OpenShift DC, based either on information found by probing the project or on common defaults. These port assignments can be overridden in various ways, as explained in the FMP documentation.&lt;/p&gt; &lt;p&gt;However, merely exposing a port in the DC does not make the application available externally. For that, we need to create OpenShift services and routes. By default, FMP generators assume that there is a single web port that acts as the basis for a service and a route. For Karaf applications, the generator creates both the OpenShift DC &lt;em&gt;and&lt;/em&gt; the application&amp;#8217;s HTTP infrastructure. Consequently, the plug-in can always define a service correctly—provided, of course, that the developer actually wants to expose HTTP services.&lt;/p&gt; &lt;p&gt;The Spring Boot generator makes an assumption that the application will expose a single HTTP service, and it will either be on port 8080 or specified in &lt;code&gt;application.properties&lt;/code&gt;. Again, so long as there is one service, and it actually should be exposed, the generator will create the correct definition.&lt;/p&gt; &lt;p&gt;For plain Java projects, the generator just guesses that a service should be exposed on port 8080. If this setting isn&amp;#8217;t correct, you will need to override the generator&amp;#8217;s behavior or specify your own service definitions. Of course, it&amp;#8217;s possible to do this with the other generators as well.&lt;/p&gt; &lt;p&gt;Service definitions are generated in YAML format in the &lt;code&gt;target/classes/META-INF/&lt;/code&gt; directory during the &lt;code&gt;fabric8:resource&lt;/code&gt; step. They are installed on OpenShift during the &lt;code&gt;fabric8:apply&lt;/code&gt; step. Of course, these individual steps might well be subsumed into a single invocation of &lt;code&gt;fabric8:deploy&lt;/code&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although the generated image will include Prometheus and Jolokia agents—each of which has an HTTP port—by default, these agents are not defined as services as they are used entirely in pod-to-pod communication.&lt;/p&gt; &lt;p&gt;By default the FMP creates services in such a way that they automatically create routes as well. The service definition that is instantiated contains the section:&lt;/p&gt; &lt;pre&gt; metadata: labels: expose: "true"&lt;/pre&gt; &lt;p&gt;The automatically created route will be unencrypted. This setup is often not what is required, and it&amp;#8217;s &lt;em&gt;definitely&lt;/em&gt; not what is required for any application that handles any other protocol than HTTP. Why? The OpenShift router cannot route other protocols without the Service Name Identification (SNI) information that is found in TLS-encrypted communications.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s possible to configure the FMP to create other kinds of routes, or no route at all. This capability is described in the &lt;a target="_blank" rel="nofollow" href="https://maven.fabric8.io/"&gt;fabric8 Maven plug-in documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Configuration using YAML fragments&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve seen how the FMP generates an OpenShift DC with sane defaults. However, it&amp;#8217;s often necessary to make at least slight modifications to the generated DC. To some extent, these modifications can be made to the plug-in configuration in &lt;code&gt;pom.xml&lt;/code&gt;, but a more flexible approach is to provide a complete or partial DC along with the application.&lt;/p&gt; &lt;p&gt;In most cases, providing a complete DC won&amp;#8217;t be convenient or appropriate. Instead, the FMP will merge a fragment of YAML code from the file &lt;code&gt;src/main/fabric8/deployment.yml&lt;/code&gt; into the DC it generates from the Maven project. Merging is done hierarchically: We can provide additions or modifications to multiple sections of the DC by placing the changes at the right point in the hierarchy.&lt;/p&gt; &lt;p&gt;Here is an example of a &lt;code&gt;deployment.xml&lt;/code&gt; that will specify resource limits for the pod:&lt;/p&gt; &lt;pre&gt; spec: template: spec: containers: - resources: requests: cpu: "0.2" memory: 128Mi limits: cpu: "1.0" memory: 512Mi&lt;/pre&gt; &lt;p&gt;Here is an example that sets an environment variable:&lt;/p&gt; &lt;pre&gt; spec: template: spec: containers: - env: - name: JAVA_OPTIONS value: '-verbose:gc'&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The YAML syntax is a bit fussy here. We often need to be careful to add to the relevant sections, rather than replacing them completely.&lt;/p&gt; &lt;p&gt;The ability to set environment variables in the DC can be important because the application does not directly control the JVM configuration—this is done by scripts in the generated image, as I will explain&lt;br /&gt; later.&lt;/p&gt; &lt;h2&gt;The generated image&lt;/h2&gt; &lt;p&gt;The generated image will contain the JVM, the application&amp;#8217;s binaries, any supporting infrastructure created by the FMP generator, and scripts to start the application. For the reasons I described earlier, it will also contain build tools that are not used at runtime, and which you will probably want to remove for production deployment.&lt;/p&gt; &lt;p&gt;For all project types, the image is configured to start execution by running the script:&lt;/p&gt; &lt;pre&gt;/usr/local/s2i/run&lt;/pre&gt; &lt;p&gt;The contents of this script vary according to the project type. For fat-JAR projects, the script will invoke:&lt;/p&gt; &lt;pre&gt;/opt/run-java/run-java.sh&lt;/pre&gt; &lt;p&gt;The&lt;code&gt;run-java.sh&lt;/code&gt; script is highly configurable using environment variables; but, unless a specific application is given, it will search the &lt;code&gt;/deployments&lt;/code&gt; directory for an executable JAR, and run that. The S2I process places the application&amp;#8217;s JAR in that directory when building the image.&lt;/p&gt; &lt;p&gt;The Karaf generator, by contrast, creates an image that executes:&lt;/p&gt; &lt;pre&gt;/deployments/karaf/bin/karaf&lt;/pre&gt; &lt;p&gt;That is, the image runs the Karaf framework, which loads the application&amp;#8217;s OSGi bundles.&lt;/p&gt; &lt;p&gt;Whatever the project type, JVM execution is controlled by environment variables. Although these variables are documented, the documentation is distributed across different sources, and it might be easier to log into the running pod and examine the scripts to see what configuration they accept. Then environment variables can be written into the DC as I explained above.&lt;/p&gt; &lt;p&gt;Regardless of the project type, the generated JVM invocation will, by default, install Java agents for the Prometheus monitoring framework, and for the Jolokia JMX agent. The operations for both these agents are controlled by configuration files in the builder image and are not easy to change. However, both of these agents are configured to be integrated into Red Hat&amp;#8217;s monitoring and management frameworks for OpenShift, so changing the configuration might be counterproductive anyway.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;run-java.sh&lt;/code&gt; script provides default JVM configuration settings that are broadly suitable for running in a container environment. It does some fairly complex interrogation of the container&amp;#8217;s resource limits to work out, for example, the number of garbage collector threads to allocate. No specific limits are set for JVM heap size; there is no &lt;code&gt;-Xmx&lt;/code&gt; setting, for example. This setup is usually appropriate in a container environment, where the JVM is the only process running in the container and will have access to all of the container&amp;#8217;s memory. However, it might sometimes be appropriate to fine-tune the heap management settings, such as by allocating different fractions of memory to different heap generations. These settings can be made through environment variables if necessary.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;The fabric8 Maven plug-in automates a number of quite complex tasks and can accommodate many different Java-based applications. However, its operation is comprehensible if we break it down into individual steps.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#038;title=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/06/02/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/" data-a2a-title="How the fabric8 Maven plug-in deploys Java applications to OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/02/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/"&gt;How the fabric8 Maven plug-in deploys Java applications to OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AYpi7gOHdaM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The fabric8 Maven plug-in, often abbreviated FMP, can be added to a Maven Java project and takes care of the administrative tasks involved in deploying the application to a Red Hat OpenShift cluster. These tasks include: Creating an OpenShift build configuration (BC). Coordinating the source-to-image (S2I) process to create a container image from the application&amp;#8217;s [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/02/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/"&gt;How the fabric8 Maven plug-in deploys Java applications to OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">718217</post-id><dc:creator>kboone</dc:creator><dc:date>2020-06-02T04:45:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/02/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/</feedburner:origLink></entry><entry><title>Keycloak 10.0.2 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Am8PQDO8gw0/keycloak-1002-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><category term="Keycloak Release" scheme="searchisko:content:tags" /><author><name>Keycloak</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_10_0_2_released</id><updated>2020-06-02T00:00:00Z</updated><published>2020-06-02T00:00:00Z</published><content type="html">&lt;p&gt;To download the release go to &lt;a href="https://www.keycloak.org//downloads.html"&gt;Keycloak downloads&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;All resolved issues&lt;/h2&gt; &lt;p&gt;The full list of resolved issues are available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%2010.0.2"&gt;JIRA&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Upgrading&lt;/h2&gt; &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="https://www.keycloak.org//docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Am8PQDO8gw0" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to Keycloak downloads. All resolved issues The full list of resolved issues are available in JIRA Upgrading Before you upgrade remember to backup your database and check the upgrade guide for anything that may have changed.</summary><dc:creator>Keycloak</dc:creator><dc:date>2020-06-02T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org//2020/06/keycloak-1002-released.html</feedburner:origLink></entry><entry><title>Cloud-native development - On local containers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/91TCWV4r3KY/cloud-native-development-on-local-containers.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_development_on_local_containers</id><updated>2020-06-01T05:00:02Z</updated><published>2020-06-01T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s1600/cloud-native-development-ld.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s320/cloud-native-development-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 3 - Development on local containers&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The previous articles were introducing the foundations of a blueprint&amp;nbsp;for cloud-native development, starting with a logical diagram and its &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;common architectural elements&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In this article we're continuing on to example use cases within the architectural blueprint. Descriptions are provided to guide you with aligning the landscape your organization works with every day.&lt;br /&gt;&lt;br /&gt;These details should help you understand both what the elements contain and how they might align and how their functionalities are grouped. Let's look at the use case where developers are leveraging local container tooling for their cloud-native development environments and see how that's mapping to a productive working architecture for deploying their solutions.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;This first use case focuses on developer environments that are using any variety of local container tooling in their development environments. The integration of these tools is of vital importance when pushing their solutions beyond the local development environment and is presented here from developer, to development environment, and finally to the test infrastructure.&lt;br /&gt;&lt;br /&gt;Any environments beyond this example, such as acceptance or production environments, would be achieved by applying the same blueprint shown in this example as the testing environment. Keep this in mind when exploring your cloud-native development on local containers solutions.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Developer on local containers (runtimes and integration)&lt;/h3&gt;&lt;div&gt;This example starts with a cloud-native developer working on their local machines, using some form of integrated development environment (IDE) together with a roughly outlined here set of tooling. We realize that many different tool sets can be found in development teams, but for simplicity we collected the following major elements as the developer stack in the figure shown here.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Every development team&amp;nbsp; uses some form of source code management systems (SCM), which these days is more likely than not some form of a Git-based repository. Along with this is a dependency management tool such as the Apache Maven repository shown here. In our example we've chosen to feature Java runtimes with frameworks like Spring Boot and Camel integration. This would be the development stack used to create both applications, front-ends, and microservices.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-Kvknf_zRPD0/XsuQUWldDfI/AAAAAAAAxLE/Tr5wXBCy8OUDqbcAaO1gPaG7ZpYlx1jIwCNcBGAsYHQ/s1600/cloud-native-development-local-containers-runtimes-sd.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-Kvknf_zRPD0/XsuQUWldDfI/AAAAAAAAxLE/Tr5wXBCy8OUDqbcAaO1gPaG7ZpYlx1jIwCNcBGAsYHQ/s320/cloud-native-development-local-containers-runtimes-sd.png" title="" width="320" /&gt;&lt;/a&gt;The last piece of the developer tooling is the container tooling used by the developer to test building and deploying their code solutions into a container. In this local container example, the tooling most often used was Docker or an open source container project tool called Podman.&lt;br /&gt;&lt;br /&gt;Once the developer is satisfied with their local machine testing of their code, the dependencies, and results of a local container deployment, they have some options for setting up the push of their work to the centralized development team infrastructure. They can setup one of the following options to generate or trigger the push to the development infrastructure:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;using git hooks, triggering a code push when it's committed to the local code repository&lt;/li&gt;&lt;li&gt;using Maven plugins, triggering a push to the development infrastructure when activated&lt;/li&gt;&lt;li&gt;using file upload features from the container tooling&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Development teams are free to use the method that best suits their own needs when pushing their code to the centralized development infrastructure.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Development infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The pushed code from the developer is picked up by the continuous integration and continuous development (CI / CD) platform, in this case most often was a Jenkins-based platform. Here the same local developer tooling is used to create a container image, test the image, and place it in the development infrastructure image registry. At this point it has been tagged as &lt;i&gt;devImage&lt;/i&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The task for the development infrastructure is to test this &lt;i&gt;devImage&lt;/i&gt;, using the CI / CD platform and any other methods deemed necessary. Once these requirements have been met, a tool know as &lt;i&gt;Skopeo&lt;/i&gt;&amp;nbsp;is used to copy images from one registry to another. This marks the point where development on local container tooling is left behind as the image is now tagged as &lt;i&gt;testImage&lt;/i&gt;&amp;nbsp;and copied to an &lt;i&gt;OpenShift Container Platform&lt;/i&gt;&amp;nbsp;image registry in the testing infrastructure.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Test infrastructure&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The test infrastructure shows more details before this use case is completed, by taking the &lt;i&gt;testImage&lt;/i&gt;&amp;nbsp;from the image registry and deploying the containers with the &lt;i&gt;application&lt;/i&gt;&amp;nbsp;and &lt;i&gt;microservices&lt;/i&gt;&amp;nbsp;as needed. At this point the testing cycle starts again with new test infrastructure data and requirements on the road to a production deployment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This use case example features runtime and integration frameworks for creating applications and microservices using local container tooling by developers in your organization. It's featuring a blueprint for mapping your cloud-native development process for deploying the developer solution through to your test infrastructure. This should be enough to help you in setting up a cloud-native development and deployment environment on towards your desired production environment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Developer on local containers (process automation)&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-7iSedJDgbso/Xsub1Wtee0I/AAAAAAAAxLQ/sKnL5V3V7VUxWknNvIrk8NWB22o-aH51ACNcBGAsYHQ/s1600/cloud-native-development-local-containers-process-sd.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-7iSedJDgbso/Xsub1Wtee0I/AAAAAAAAxLQ/sKnL5V3V7VUxWknNvIrk8NWB22o-aH51ACNcBGAsYHQ/s320/cloud-native-development-local-containers-process-sd.png" title="" width="320" /&gt;&lt;/a&gt;Another example is provided in the figure shown here, this is the same development setup and deployment across local developer machines, central development infrastructure, and testing infrastructure. The featured development tooling is now for process automation projects that deploy eventual process microservices with eventual microservices that they might need.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;h3&gt;Exploring the diagrams&lt;/h3&gt;&lt;div&gt;As mentioned in the introduction to this series, we've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams. The&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-dRBXuaZt5t0/XsuO-04T-9I/AAAAAAAAxK4/lXES7oKvrwEJjgtKcvJyJqwK3v0Ey65lgCNcBGAsYHQ/s1600/Screenshot%2B2020-05-25%2Bat%2B11.24.53.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="303" data-original-width="1219" height="98" src="https://1.bp.blogspot.com/-dRBXuaZt5t0/XsuO-04T-9I/AAAAAAAAxK4/lXES7oKvrwEJjgtKcvJyJqwK3v0Ey65lgCNcBGAsYHQ/s400/Screenshot%2B2020-05-25%2Bat%2B11.24.53.png" title="" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;To access the diagram covered in this article, you scroll down to the file listings on the main page, you can locate a schematic diagram as shown in the figure here.&lt;br /&gt;&lt;br /&gt;This is the collection for the schematic diagrams associated with cloud-native development:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case it's a single image you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can click to automatically open the project diagrams in the diagram tooling used in this blueprint&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you design your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the cloud-native development portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;A blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-local-containers.html" target="_blank"&gt;Cloud-native development on local containers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Cloud-native development on remote containers&lt;/li&gt;&lt;li&gt;Cloud-native deployments&lt;/li&gt;&lt;li&gt;Cloud-native advanced deployments&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above. Next in this series, taking a look at cloud-native development using remote container tooling.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=X8Vj5e-lQFE:3LeK12mF6-Q:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=X8Vj5e-lQFE:3LeK12mF6-Q:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=X8Vj5e-lQFE:3LeK12mF6-Q:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=X8Vj5e-lQFE:3LeK12mF6-Q:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=X8Vj5e-lQFE:3LeK12mF6-Q:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=X8Vj5e-lQFE:3LeK12mF6-Q:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=X8Vj5e-lQFE:3LeK12mF6-Q:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=X8Vj5e-lQFE:3LeK12mF6-Q:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=X8Vj5e-lQFE:3LeK12mF6-Q:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=X8Vj5e-lQFE:3LeK12mF6-Q:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=X8Vj5e-lQFE:3LeK12mF6-Q:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/X8Vj5e-lQFE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/91TCWV4r3KY" height="1" width="1" alt=""/&gt;</content><summary>Part 3 - Development on local containersThe previous articles were introducing the foundations of a blueprint for cloud-native development, starting with a logical diagram and its common architectural elements. In this article we're continuing on to example use cases within the architectural blueprint. Descriptions are provided to guide you with aligning the landscape your organization works with ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-06-01T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/X8Vj5e-lQFE/cloud-native-development-on-local-containers.html</feedburner:origLink></entry><entry><title>Hot Rod per-cache configuration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/r_Xx2PU_QCM/" /><category term="configuration" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="Hot Rod" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-hot_rod_per_cache_configuration</id><updated>2020-05-30T12:00:00Z</updated><published>2020-05-30T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Aside from being able to configure a Java Hot Rod client through a &lt;a href="https://infinispan.org/blog/"&gt;compact URI&lt;/a&gt; representation, Infinispan 11 brings some additional changes to remote cache configuration.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While remote caches did have some client-side configuration, this was never implemented cleanly, resorting to multiple overloaded variations on the &lt;code&gt;getCache()&lt;/code&gt; method, for example to obtain a transactional cache, or enabling near-caching.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan 11 now allows specifying per-cache configuration both through the API and through the declarative properties file.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Let’s look at a few examples.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;ConfigurationBuilder builder = &lt;span class="keyword"&gt;new&lt;/span&gt; ConfigurationBuilder() .uri(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod://127.0.0.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;); .remoteCache(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;closecache&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;) .nearCacheMode(NearCacheMode.INVALIDATED) .nearCacheMaxEntries(&lt;span class="integer"&gt;10000&lt;/span&gt;) .remoteCache(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;txcache&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;) .transactionMode(TransactionMode.NON_XA); RemoteCacheManager manager = &lt;span class="keyword"&gt;new&lt;/span&gt; RemoteCacheManager(builder.build());&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the above code snippet, we enable near-caching for the cache &lt;code&gt;closecache&lt;/code&gt; and we enable NON_XA transactions on the cache &lt;code&gt;txcache&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The equivalent &lt;code&gt;hotrod-client.properties&lt;/code&gt; file:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://127.0.0.1 infinispan.client.hotrod.cache.closecache.near_cache.mode=INVALIDATED infinispan.client.hotrod.cache.closecache.near_cache.max_entries=10000 infinispan.client.hotrod.cache.txcache.transaction.transaction_mode=NON_XA&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_automatic_cache_creation"&gt;&lt;a class="anchor" href="#_automatic_cache_creation" /&gt;Automatic cache creation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A neat feature that has been implemented as part of per-cache configuration, is the ability to automatically create a cache on the server on first use, if it is missing, by supplying either an existing template or a full-blown configuration.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;ConfigurationBuilder builder = &lt;span class="keyword"&gt;new&lt;/span&gt; ConfigurationBuilder() .uri(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod://127.0.0.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;); .remoteCache(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;mydistcache&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;) .templateName(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;org.infinispan.DIST_SYNC&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;); RemoteCacheManager manager = &lt;span class="keyword"&gt;new&lt;/span&gt; RemoteCacheManager(builder.build()); Cache&amp;lt;&lt;span class="predefined-type"&gt;String&lt;/span&gt;, &lt;span class="predefined-type"&gt;String&lt;/span&gt;&amp;gt; cache = manager.getCache(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;mydistcache&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;); ...&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The above example using a properties file would look like:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://127.0.0.1 infinispan.client.hotrod.cache.mydistcache.template=org.infinispan.DIST_SYNC&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/r_Xx2PU_QCM" height="1" width="1" alt=""/&gt;</content><summary>Aside from being able to configure a Java Hot Rod client through a compact URI representation, Infinispan 11 brings some additional changes to remote cache configuration. While remote caches did have some client-side configuration, this was never implemented cleanly, resorting to multiple overloaded variations on the getCache() method, for example to obtain a transactional cache, or enabling near-...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-05-30T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/05/30/hotrod-percache-configuration/</feedburner:origLink></entry><entry><title>Editoral 29 May 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/c2-NpgctxTs/editoral-29-may-2020" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="Teiid" scheme="searchisko:content:tags" /><author><name>lightguard</name></author><id>searchisko:content:id:jbossorg_blog-editoral_29_may_2020</id><updated>2020-05-29T20:06:43Z</updated><published>2020-05-29T20:06:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:adca4ca5-fd99-4a6b-8996-922bda42fc1b] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;div&gt;&lt;div&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Welcome back! Things keep rolling along for us within Middleware at Red Hat. We have a couple of new releases and some blogs to talk about this week, so let&amp;#8217;s dig in.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Releases&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;div class="sectionbody"&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/05/25/infinispan-11/" rel="nofollow"&gt;Infinispan 11.0.0.0.CR1&lt;/a&gt; - This CR release sees non-blocking internal changes, a non-blocking Store SPI, slight modifications to clustering scaling, better/more server security, CLI, kubernetes/OpenShift operator, and an update to documentation!&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://github.com/quarkusio/quarkus/milestone/68?closed=1" rel="nofollow"&gt;Quarkus 1.5.0.Final&lt;/a&gt; - The milestoe is done and the artifacts are in Maven Central. There are a few things left to do to offically announce the release, but all the coding is done. The link here is to the GitHub milestone for a list of issues completed.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://teiid.blogspot.com/2020/05/teiid-spring-boot-150-released.html" rel="nofollow"&gt;Teiid Spring Boot 1.5.0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Blogs&lt;/h2&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To go along with the Infinispan release, a couple of new blog posts have come out:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/05/28/cli/" rel="nofollow"&gt;CLI enhancements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/05/26/hotrod-uri/" rel="nofollow"&gt;Hot Rod URI&lt;/a&gt;, so you can connect via Hot Rod the same way you would a JDBC datastore.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Eric Schabell has a couple of entries into his Cloud-native development series:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" rel="nofollow"&gt;A Blueprint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" rel="nofollow"&gt;Common Architectural Elements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;There is also an entry called &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/05/reality-bites-3-misconceptions-can-lead-to-micorservice-mayhem-slides.html" rel="nofollow"&gt;Reality Bites: 3 misconceptions that can lead to microservice mayhem&lt;/a&gt; discussing pitfalls to avoid while working with Microservices&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Lastly, we want to cover episodes 2, 3, and 4 of the Quarkus Insights video podcast. Episode 2 covers &lt;code&gt;quarkus:dev&lt;/code&gt; and Command mode. Episode 3 discusses Hibernate and Panache. The most recent one, episode 4, talks about JHipster for Quarkus. You can find these video pod casts at &lt;a class="jive-link-external-small" href="https://www.youtube.com/playlist?list=PLsM3ZE5tGAVZ5p_CTx5YPLdMbyjlzfj8y" rel="nofollow"&gt;YouTube&lt;/a&gt; or the audio on Apple Podcasts and Spotify.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:adca4ca5-fd99-4a6b-8996-922bda42fc1b] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/c2-NpgctxTs" height="1" width="1" alt=""/&gt;</content><summary>Welcome back! Things keep rolling along for us within Middleware at Red Hat. We have a couple of new releases and some blogs to talk about this week, so let’s dig in. Releases   Infinispan 11.0.0.0.CR1 - This CR release sees non-blocking internal changes, a non-blocking Store SPI, slight modifications to clustering scaling, better/more server security, CLI, kubernetes/OpenShift operator, and an up...</summary><dc:creator>lightguard</dc:creator><dc:date>2020-05-29T20:06:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/05/29/editoral-29-may-2020</feedburner:origLink></entry><entry><title>Red Hat Software Collections 3.5 brings updates for Red Hat Enterprise Linux 7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DWDOIUO5G9E/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="compilers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="perl" scheme="searchisko:content:tags" /><category term="php" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="rhel 6" scheme="searchisko:content:tags" /><category term="RHEL 7" scheme="searchisko:content:tags" /><category term="Ruby" scheme="searchisko:content:tags" /><author><name>Bob Davis</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_software_collections_3_5_brings_updates_for_red_hat_enterprise_linux_7</id><updated>2020-05-29T18:59:44Z</updated><published>2020-05-29T18:59:44Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/red-hat-software-collections-35-and-red-hat-developer-toolset-91-now-generally-available"&gt;Red Hat Software Collections 3.5 and Red Hat Developer Toolset 9.1&lt;/a&gt; are now available for Red Hat Enterprise Linux 7. Here’s what that means for developers.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections (RHSCL)&lt;/a&gt; is how we distribute the latest stable versions of various runtimes and languages through &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux (RHEL)&lt;/a&gt; 7, with some components available in RHEL 6. RHSCL also contains the Red Hat Developer Toolset, which is the set of tools we curate for &lt;a href="https://developers.redhat.com/topics/c/"&gt;C/C++&lt;/a&gt; and Fortran. &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/rhscl-rhel7"&gt;These components are supported for up to five years&lt;/a&gt;, which helps you build apps that have a long lifecycle as well.&lt;/p&gt; &lt;p&gt;&lt;span id="more-725967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What changed?&lt;/h2&gt; &lt;p&gt;Updated collections in RHSCL 3.5 include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Python 3.8&lt;/b&gt;, which introduces assignment expressions and several optimizations to make Python 3.8 run faster than previous versions, and with previous version compatibility to ease upgrade strategies.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Ruby 2.7&lt;/b&gt;, which offers a large number of new features such as pattern matching, Read-Eval-Print-Loop (REPL) improvements, and compaction garbage collection (GC) for fragmented memory spaces.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Perl 5.30&lt;/b&gt;, which adds new features for developers such as the limited variable-length lookbehinds, Unicode 12.1, faster string interpolation, and other performance improvements.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Apache httpd 2.4&lt;/b&gt; (update), which fixes a number of bugs and includes an updated version of &lt;code&gt;mod_md&lt;/code&gt; to support ACMEv2.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Varnish 6&lt;/b&gt;, which updates Varnish Cache to version 6.0.6, the latest bi-annual fresh release with numerous bug fixes and performance improvements.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Java Mission Control 7.1&lt;/b&gt;, which updates JDK Mission Control to version 7.1.1 and fixes numerous bugs. It also adds key enhancements, including multiple rule optimizations, a new JOverflow view based on Standard Widget Toolkit (SWT), a new flame graph view, and a new latency visualization using the High Dynamic Range (HDR) Histogram.&lt;/li&gt; &lt;li&gt;&lt;b&gt;HAProxy 1.8.24&lt;/b&gt;, which provides multiple bug and security fixes.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The last—but certainly not least—update to Red Hat Software Collections 3.5 is Red Hat Developer Toolset (DTS) version 9.1, which is the set of tools we curate for C/C++ and Fortran. For DTS, we updated the compilers, debuggers, and performance monitoring tools to ensure the best experience for software developers using these languages. At the center of DTS 9.1 is GCC 9.3, which brings a huge number of improvements including improved diagnostics and useability. The &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/9/html/9.1_release_notes/dts9.1_release#Features"&gt;full list of tools that we updated in DTS 9.1 is available in the release notes&lt;/a&gt;, as always.&lt;/p&gt; &lt;h2&gt;How do I get this great stuff?&lt;/h2&gt; &lt;p&gt;With a &lt;a href="https://developers.redhat.com/articles/getting-red-hat-developer-subscription-what-rhel-users-need-know/"&gt;Red Hat Developer Subscription&lt;/a&gt;, you have access to &lt;a href="https://developers.redhat.com/products/rhel/download"&gt;Red Hat Enterprise Linux 7&lt;/a&gt;, where you can update these packages. If you have already enabled Red Hat Software Collections in the subscription manager, follow the instructions below for either a specific software collection or a container image. If you haven’t already enabled RHSCLs, please &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/3.5_release_notes/chap-installation"&gt;follow the instructions in our online documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To install a specific software collection, type the following into your command line as root:&lt;/p&gt; &lt;pre&gt;$ yum install &lt;i&gt;software_collection…&lt;/i&gt;&lt;/pre&gt; &lt;p&gt;Replace &lt;code&gt;software_collection&lt;/code&gt; with a space-separated list of the software collections you want to install. For example, to install &lt;code&gt;php54&lt;/code&gt; and &lt;code&gt;rh-mariadb100&lt;/code&gt;, type as root:&lt;/p&gt; &lt;pre&gt;$ yum install rh-php72 rh-mariadb102&lt;/pre&gt; &lt;p&gt;Doing this installs the main meta-package for the selected software collection and a set of required packages as its dependencies. For information on how to install other packages such as additional modules, see &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/3.5_release_notes/chap-Installation#sect-Installation-Install-Optional"&gt;Section 2.2.2, “Installing Optional Packages.”&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Another option, of course, is to start with our &lt;a target="_blank" rel="nofollow" href="https://catalog.redhat.com/software/containers/explore"&gt;container images for these packages&lt;/a&gt;, which make it easier to build and deploy mission-critical applications that use these components for Red Hat Enterprise Linux and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Red Hat OpenShift&lt;/a&gt; platforms.&lt;/p&gt; &lt;p&gt;The full&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/3.5_release_notes/index"&gt; release notes for Red Hat Software Collections 3.5&lt;/a&gt; and &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_developer_toolset/9/html/9.1_release_notes/index"&gt;Red Hat Developer Toolset 9.1&lt;/a&gt; are available in the customer portal.&lt;/p&gt; &lt;h2&gt;What about Red Hat Enterprise Linux 8?&lt;/h2&gt; &lt;p&gt;Software Collections are for Red Hat Enterprise Linux 7. Red Hat Enterprise Linux 8 is managed in a different way through &lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/"&gt;Application Streams&lt;/a&gt;, and you can find updated RHEL 8 packages in the RHEL8 &lt;code&gt;appstream&lt;/code&gt; repository. The updates for these packages might not be the same for Red Hat Enterprise Linux 8 Application Streams, so please check on the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/rhel8-app-streams-life-cycle"&gt;Application Streams Life Cycle&lt;/a&gt; page.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#38;linkname=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fred-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7%2F&amp;#038;title=Red%20Hat%20Software%20Collections%203.5%20brings%20updates%20for%20Red%20Hat%20Enterprise%20Linux%207" data-a2a-url="https://developers.redhat.com/blog/2020/05/29/red-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7/" data-a2a-title="Red Hat Software Collections 3.5 brings updates for Red Hat Enterprise Linux 7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/29/red-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7/"&gt;Red Hat Software Collections 3.5 brings updates for Red Hat Enterprise Linux 7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DWDOIUO5G9E" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Software Collections 3.5 and Red Hat Developer Toolset 9.1 are now available for Red Hat Enterprise Linux 7. Here’s what that means for developers. Red Hat Software Collections (RHSCL) is how we distribute the latest stable versions of various runtimes and languages through Red Hat Enterprise Linux (RHEL) 7, with some components available in RHEL 6. RHSCL also contains the Red Hat Develope...</summary><dc:creator>Bob Davis</dc:creator><dc:date>2020-05-29T18:59:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/29/red-hat-software-collections-3-5-brings-updates-for-red-hat-enterprise-linux-7/</feedburner:origLink></entry><entry><title>Debugging vHost user TX contention in Open vSwitch</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/O3UR4BG0j7s/" /><category term="devops" scheme="searchisko:content:tags" /><category term="dpdk" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Open vSwitch" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="virtual machine" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>David Marchand</name></author><id>searchisko:content:id:jbossorg_blog-debugging_vhost_user_tx_contention_in_open_vswitch</id><updated>2020-05-29T07:00:12Z</updated><published>2020-05-29T07:00:12Z</published><content type="html">&lt;p&gt;It isn&amp;#8217;t always easy to understand how &lt;a target="_blank" rel="nofollow" href="https://github.com/openvswitch/ovs"&gt;Open vSwitch (OVS)&lt;/a&gt; cycles are spent, especially because various parameters and configuration options can affect how OVS behaves. Members of the Open vSwitch community are actively working to understand what causes packets drops in Open vSwitch. Efforts so far have included &lt;a target="_blank" rel="nofollow" href="https://github.com/openvswitch/ovs/commit/c161357d5d96"&gt;adding a custom statistic for vHost TX retries&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://github.com/openvswitch/ovs/commit/9ff24b9c9323"&gt;tracking vHost TX contention&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://github.com/openvswitch/ovs/commit/3d56e4ac445d"&gt;adding a coverage counter to count vHost IRQs&lt;/a&gt;. We are particularly interested in the user space datapath that uses the Data Plane Development Kit (DPDK) for fast I/O.&lt;/p&gt; &lt;p&gt;Adding these statistics is an ongoing effort, and we won&amp;#8217;t cover all of the corners. In some cases, the statistics leave doubts about what is causing a behavior.&lt;/p&gt; &lt;p&gt;In this article, I will introduce a new counter we&amp;#8217;ve added to learn more about contention in the vHost transmission path. I&amp;#8217;ll also show you how to use the new counter with &lt;code&gt;perf&lt;/code&gt;, and I&amp;#8217;ll discuss what&amp;#8217;s next for our ongoing efforts.&lt;/p&gt; &lt;p&gt;&lt;span id="more-707617"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The test environment for reproducing contention&lt;/h2&gt; &lt;p&gt;In this section, we&amp;#8217;ll set up a test environment to reproduce contention in the vHost transmission path. Our reference system is running Red Hat Enterprise Linux (RHEL) 7.7 with &lt;code&gt;openvswitch2.11-2.11.0-35.el7fdp.x86_64&lt;/code&gt;. You can skip this section if your environment is set up and running already.&lt;/p&gt; &lt;h3&gt;Configuring OVS&lt;/h3&gt; &lt;p&gt;Assuming you have Red Hat Enterprise Linux 7.7 already running in your system, you can configure OVS with a single bridge that has two plugged-in physical ports and two &lt;code&gt;vhost-user-client&lt;/code&gt; ports.&lt;/p&gt; &lt;p&gt;The physical ports are connected to a &lt;a target="_blank" rel="nofollow" href="https://trex-tgn.cisco.com/"&gt;TRex Realistic Traffic Generator&lt;/a&gt;. The traffic generator will send a unidirectional flow of packets to the bridge, passed to the &lt;code&gt;vhost-user-clients&lt;/code&gt; ports. We&amp;#8217;ve crafted these packets to send traffic to both queues of the first physical port on the OVS side. The &lt;code&gt;vhost-user-clients&lt;/code&gt; ports are connected to a virtual machine (VM) that sends the packets back using &lt;code&gt;testpmd&lt;/code&gt; in &lt;code&gt;io forward&lt;/code&gt; mode.&lt;/p&gt; &lt;p&gt;If you need more details about setting up a TRex traffic generator, configuring a host running OVS, or other aspects of this setup, see Eelco Chaudron&amp;#8217;s introduction to &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2017/09/28/automated-open-vswitch-pvp-testing/"&gt;Automated Open vSwitch PVP testing&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &lt;h3&gt;Configuring the bridge and host&lt;/h3&gt; &lt;p&gt;The setup in the ASCII diagram here differs slightly from the Physical interface to Virtual interface back to Physical interface (PVP) setup shown in the linked article above.&lt;/p&gt; &lt;pre&gt;+------+ +-----+ +---------+ | | | | | | | 0+---+1 4+---+0 | | tgen | | ovs | | testpmd | | 1+---+2 5+---+1 | | | | | | | +------+ +-----+ +---------+ &lt;/pre&gt; &lt;p&gt;Configure the bridge on the host as follows:&lt;/p&gt; &lt;pre&gt;# ovs-vsctl set Open_vSwitch . other_config:dpdk-init=true # ovs-vsctl set Open_vSwitch . other_config:pmd-cpu-mask=0x00008002 # ovs-vsctl add-br br0 -- set bridge br0 datapath_type=netdev # ovs-vsctl add-port br0 dpdk0 -- \ set Interface dpdk0 type=dpdk -- \ set Interface dpdk0 options:dpdk-devargs=0000:01:00.0 -- \ set Interface dpdk0 ofport_request=1 -- \ set Interface dpdk0 options:n_rxq=2 # ovs-vsctl add-port br0 dpdk1 -- \ set Interface dpdk1 type=dpdk -- \ set Interface dpdk1 options:dpdk-devargs=0000:01:00.1 -- \ set Interface dpdk1 ofport_request=2 -- \ set Interface dpdk1 options:n_rxq=2 # ovs-vsctl add-port br0 vhost0 -- \ set Interface vhost0 type=dpdkvhostuserclient -- \ set Interface vhost0 options:vhost-server-path="/tmp/vhost-sock0" -- \ set Interface vhost0 ofport_request=4 # ovs-vsctl add-port br0 vhost1 -- \ set Interface vhost1 type=dpdkvhostuserclient -- \ set Interface vhost1 options:vhost-server-path="/tmp/vhost-sock1" -- \ set Interface vhost1 ofport_request=5 &lt;/pre&gt; &lt;p&gt;Check the polling configuration:&lt;/p&gt; &lt;pre&gt;# ovs-appctl dpif-netdev/pmd-rxq-show pmd thread numa_id 0 core_id 1: isolated : false port: dpdk0 queue-id: 0 pmd usage: NOT AVAIL port: dpdk1 queue-id: 1 pmd usage: NOT AVAIL port: vhost0 queue-id: 0 pmd usage: NOT AVAIL pmd thread numa_id 0 core_id 15: isolated : false port: dpdk0 queue-id: 1 pmd usage: NOT AVAIL port: dpdk1 queue-id: 0 pmd usage: NOT AVAIL port: vhost1 queue-id: 0 pmd usage: NOT AVAIL &lt;/pre&gt; &lt;p&gt;We could let this OVS bridge with a &lt;code&gt;NORMAL&lt;/code&gt; action, in which case it would behave like a standard switch learning Media Access Control (MAC) addresses on its ports. To simplify the setup, let&amp;#8217;s just write a few OpenFlow rules for a basic mapping:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Receiving on the physical port &lt;code&gt;dpdk0&lt;/code&gt; pushes packets to &lt;code&gt;vhost0&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Receiving on the physical port &lt;code&gt;vhost0&lt;/code&gt; pushes packets to &lt;code&gt;dpdk0&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Receiving on the physical port &lt;code&gt;dpdk1&lt;/code&gt; pushes packets to &lt;code&gt;vhost1&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Receiving on the physical port &lt;code&gt;vhost1&lt;/code&gt; pushes packets to &lt;code&gt;dpdk1&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here&amp;#8217;s that mapping:&lt;/p&gt; &lt;pre&gt;# ovs-ofctl del-flows br0 # ovs-ofctl add-flow br0 in_port=1,actions=4 # ovs-ofctl add-flow br0 in_port=4,actions=1 # ovs-ofctl add-flow br0 in_port=2,actions=5 # ovs-ofctl add-flow br0 in_port=5,actions=2 &lt;/pre&gt; &lt;p&gt;That completes the test environment.&lt;/p&gt; &lt;h2&gt;Catching vHost TX contention&lt;/h2&gt; &lt;p&gt;Now let&amp;#8217;s take a look at the new coverage counter for OVS:&lt;/p&gt; &lt;pre&gt;# ovs-appctl coverage/show |grep vhost vhost_tx_contention 39082.8/sec 11553.017/sec 192.5503/sec total: 758359 &lt;/pre&gt; &lt;h3&gt;Adding a perf probe&lt;/h3&gt; &lt;p&gt;As it is, the counter leaves the question of which cores are impacted by contention. We can use &lt;code&gt;perf&lt;/code&gt; to catch more information without stopping OVS. Just add a probe in the branch where the contention occurs:&lt;/p&gt; &lt;pre&gt;# perf probe -x $(which ovs-vswitchd) 'netdev_dpdk_vhost_tx_lock=__netdev_dpdk_vhost_send:22 netdev-&amp;#62;name:string qid' Added new event: probe_ovs:netdev_dpdk_vhost_tx_lock (on __netdev_dpdk_vhost_send:22 in /usr/sbin/ovs-vswitchd with name=netdev-&amp;#62;name:string qid) &lt;/pre&gt; &lt;p&gt;Now you can use the counter in all of your &lt;code&gt;perf&lt;/code&gt; tools.&lt;/p&gt; &lt;h3&gt;Using the coverage counter in perf&lt;/h3&gt; &lt;p&gt;Here, we ask &lt;code&gt;perf&lt;/code&gt; to record a specific event:&lt;/p&gt; &lt;pre&gt;# perf record -e probe_ovs:netdev_dpdk_vhost_tx_lock -aR sleep 1 [ perf record: Woken up 15 times to write data ] [ perf record: Captured and wrote 3.938 MB perf.data (44059 samples) ] &lt;/pre&gt; &lt;p&gt;We can also make a report of this &lt;code&gt;perf&lt;/code&gt; session:&lt;/p&gt; &lt;pre&gt;# perf report -F +pid --stdio # To display the perf.data header info, please use --header/--header-only options. # # # Total Lost Samples: 0 # # Samples: 44K of event 'probe_ovs:netdev_dpdk_vhost_tx_lock' # Event count (approx.): 44059 # # Overhead Pid:Command Trace output # ........ ............... .................................. # 61.30% 33003:pmd60 (55ef4abe5494) name="vhost0" qid=0 38.70% 33006:pmd61 (55ef4abe5494) name="vhost0" qid=0 # # (Tip: For a higher level overview, try: perf report --sort comm,dso) # &lt;/pre&gt; &lt;p&gt;The new coverage counter makes interpreting contention easier. We can see that the contention happened between &lt;code&gt;pmd60&lt;/code&gt; (on core 1, by looking at the OVS logs) and &lt;code&gt;pmd61&lt;/code&gt; (on core 15). Both &lt;code&gt;pmd&lt;/code&gt; threads are trying to send packets on the &lt;code&gt;vhost0&lt;/code&gt; port queue zero.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Using &lt;code&gt;perf&lt;/code&gt; to debug contention is interesting, and it worked in this case because we were trying to catch events on an error or slow path. But &lt;code&gt;perf&lt;/code&gt; involves context switches that have a visible effect on performance. We can&amp;#8217;t use it without accounting for the performance impact.&lt;/p&gt; &lt;p&gt;Even if it&amp;#8217;s fine for developers to put in a probe by reading the code sources, support or operations teams will prefer higher-level tools or traces. The DPDK community has &lt;a target="_blank" rel="nofollow" href="http://inbox.dpdk.org/dev/20200318190241.3150971-1-jerinj@marvell.com/"&gt;started a workgroup&lt;/a&gt; to set traces with a minimal impact at key places in the DPDK infrastructure code. We are still far from something as rich as &lt;code&gt;perf&lt;/code&gt;, but this is likely to be a focus for part of the community for the next year.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#38;linkname=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F29%2Fdebugging-vhost-user-tx-contention-in-open-vswitch%2F&amp;#038;title=Debugging%20vHost%20user%20TX%20contention%20in%20Open%20vSwitch" data-a2a-url="https://developers.redhat.com/blog/2020/05/29/debugging-vhost-user-tx-contention-in-open-vswitch/" data-a2a-title="Debugging vHost user TX contention in Open vSwitch"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/29/debugging-vhost-user-tx-contention-in-open-vswitch/"&gt;Debugging vHost user TX contention in Open vSwitch&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/O3UR4BG0j7s" height="1" width="1" alt=""/&gt;</content><summary>It isn’t always easy to understand how Open vSwitch (OVS) cycles are spent, especially because various parameters and configuration options can affect how OVS behaves. Members of the Open vSwitch community are actively working to understand what causes packets drops in Open vSwitch. Efforts so far have included adding a custom statistic for vHost TX retries, tracking vHost TX contention, and addin...</summary><dc:creator>David Marchand</dc:creator><dc:date>2020-05-29T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/29/debugging-vhost-user-tx-contention-in-open-vswitch/</feedburner:origLink></entry></feed>
